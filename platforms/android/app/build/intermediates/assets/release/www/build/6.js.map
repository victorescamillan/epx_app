{"version":3,"sources":["../../src/pages/solo/solo.module.ts","../../src/pages/solo/solo.ts"],"names":[],"mappings":"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","file":"6.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { IonicPageModule } from 'ionic-angular';\nimport { SoloPage } from './solo';\n\n@NgModule({\n  declarations: [\n    SoloPage,\n  ],\n  imports: [\n    IonicPageModule.forChild(SoloPage),\n  ],\n})\nexport class SoloPageModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/solo/solo.module.ts","import { Component } from '@angular/core';\nimport { IonicPage, NavController, NavParams, LoadingController } from 'ionic-angular';\nimport { EpxProvider } from '../../providers/epx/epx';\nimport { Observable } from 'rxjs/Observable';\nimport { CacheService } from 'ionic-cache';\nimport { SoloDetailsPage } from '../solo-details/solo-details';\n\n@IonicPage()\n@Component({\n  selector: 'page-solo',\n  templateUrl: 'solo.html',\n})\nexport class SoloPage {\n\n  soloList: Observable<any>;\n  isLoading: boolean = true;\n  isRefresh: boolean = false;\n  constructor(\n    private loadingCtrl: LoadingController,\n    private epxProvider: EpxProvider,\n    private cache: CacheService,\n    public navCtrl: NavController, public navParams: NavParams) {\n    // Set TTL to 12h\n    cache.setDefaultTTL(60 * 60 * 12);\n    // Keep our cached results when device is offline!\n    cache.setOfflineInvalidate(false);\n    this.LoadSolo();\n  }\n\n  ionViewDidLoad() {\n    console.log('ionViewDidLoad SoloPage');\n  }\n  soloDetails(solo) {\n    this.navCtrl.push('SoloDetailsPage', { data: solo });\n  }\n  LoadSolo(refresher?) {\n    let url = this.epxProvider.solo_url;\n    let ttl = 1000;\n    let delay_type = 'all';\n    let groupKey = 'solo-list';\n\n    this.epxProvider.getsolo().subscribe(data => { //Get data from url/api\n      var solo = Observable.of(Object.keys(data).map(key => data[key])); //Convert object to array since angular accepts array for iteration\n      console.log('solo list', solo);\n      if (refresher) {\n        this.soloList = this.cache.loadFromDelayedObservable(url, solo, groupKey);\n        this.soloList.subscribe(data => {\n          refresher.complete();\n        });\n      }\n      else {\n        this.soloList = this.cache.loadFromObservable(url, solo, groupKey);\n      }\n      this.isLoading = false;\n      this.isRefresh = true;\n    });\n  }\n  //Pull to refresh page\n  forceReload(refresher) {\n    this.LoadSolo(refresher);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/solo/solo.ts"],"sourceRoot":""}