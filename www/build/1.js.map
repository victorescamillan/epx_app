{"version":3,"sources":["../../src/pages/member-map/member-map.module.ts","../../src/pages/member-map/member-map.ts","../../node_modules/@ionic-native/google-maps/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAyC;AACO;AACH;AAU7C;IAAA;IAAkC,CAAC;IAAtB,mBAAmB;QAR/B,uEAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,kEAAa;aACd;YACD,OAAO,EAAE;gBACP,sEAAe,CAAC,QAAQ,CAAC,kEAAa,CAAC;aACxC;SACF,CAAC;OACW,mBAAmB,CAAG;IAAD,0BAAC;CAAA;AAAH;;;;;;;;;;;;;;;;;;;;;;;ACZiC;AACE;AACb;AASnB;AAOnC;IAKE,uBACU,QAAkB,EAClB,QAAqB,EAAS,OAAsB,EAAS,SAAoB;QADjF,aAAQ,GAAR,QAAQ,CAAU;QAClB,aAAQ,GAAR,QAAQ,CAAa;QAAS,YAAO,GAAP,OAAO,CAAe;QAAS,cAAS,GAAT,SAAS,CAAW;QAH3F,cAAS,GAAY,IAAI,CAAC;IAI1B,CAAC;IACD,wCAAgB,GAAhB;QAAA,iBAKC;QAJC,IAAI,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,wBAAwB,CAAC;YACtD,KAAI,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC;YACnB,UAAU,EAAE,CAAC;QACf,CAAC,EAAC,CAAC,CAAC,CAAC;IACP,CAAC;IACD,sCAAc,GAAd;QACE,OAAO,CAAC,GAAG,CAAC,8BAA8B,CAAC,CAAC;QAC5C,IAAI,CAAC,OAAO,EAAE,CAAC;IACjB,CAAC;IACD,+BAAO,GAAP;QAAA,iBAqDC;QApDC,IAAI,CAAC,QAAQ,CAAC,kBAAkB,EAAE,CAAC,SAAS,CAAC,aAAG;YAC9C,KAAI,CAAC,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,aAAG,IAAI,UAAG,CAAC,GAAG,CAAC,EAAR,CAAQ,CAAC,CAAC;YACrD,IAAI,GAAG,GAAG,MAAM,CAAC,KAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;YAC3C,IAAI,GAAG,GAAG,MAAM,CAAC,KAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;YAC5C,IAAI,UAAU,GAAqB;gBACjC,OAAO,EAAE,kBAAkB;gBAC3B,MAAM,EAAE;oBACN,MAAM,EAAE;wBACN,GAAG,EAAE,GAAG;wBACR,GAAG,EAAE,GAAG;qBACT;oBACD,IAAI,EAAE,CAAC;oBACP,IAAI,EAAE,EAAE;iBACT;aACF,CAAC;YACF,KAAI,CAAC,GAAG,GAAG,6EAAU,CAAC,MAAM,CAAC,KAAI,CAAC,OAAO,CAAC,aAAa,EAAE,UAAU,CAAC,CAAC;YACrE,KAAI,CAAC,OAAO,CAAC,OAAO,CAAC,cAAI;gBACvB,IAAI,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBAChC,IAAI,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;gBACjC,+CAA+C;gBAC/C,KAAI,CAAC,GAAG,CAAC,GAAG,CAAC,kFAAe,CAAC,SAAS,CAAC;qBACpC,IAAI,CAAC;oBACJ,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;oBAC7B,sCAAsC;oBACtC,KAAI,CAAC,GAAG,CAAC,SAAS,CAAC;wBACjB,KAAK,EAAE,IAAI,CAAC,IAAI;wBAChB,IAAI,EAAE,SAAS;wBACf,OAAO,EAAE,IAAI,CAAC,QAAQ;wBACtB,SAAS,EAAE,MAAM;wBACjB,QAAQ,EAAE;4BACR,GAAG,EAAE,GAAG;4BACR,GAAG,EAAE,GAAG;yBACT;qBACF,CAAC,CAAC,IAAI,CAAC,gBAAM;wBACZ,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC;4BACxB,MAAM,CAAC,EAAE,CAAC,kFAAe,CAAC,UAAU,CAAC;iCAClC,SAAS,CAAC;gCACT,IAAI,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;gCAClC,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,mBAAmB,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC;4BAC3D,CAAC,CAAC,CAAC;oBACT,CAAC,CAAC,CAAC;gBACL,CAAC,EAAC,eAAK;oBACL,KAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,iBAAiB,CAAC,CAAC;gBAChD,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;YAEH,KAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACzB,CAAC,EAAE,eAAK;YACN,KAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,iBAAiB,CAAC,CAAC;QAChD,CAAC,CAAC;IAGJ,CAAC;IAvEiB;QAAjB,yEAAS,CAAC,KAAK,CAAC;kCAAU,iEAAU;kDAAC;IAD3B,aAAa;QAJzB,wEAAS,CAAC;YACT,QAAQ,EAAE,iBAAiB;WACG;SAC/B,CAAC;2NAO4B;YACR,UAAuE;OAPhF,aAAa,CAyEzB;IAAD,CAAC;AAAA;SAzEY,aAAa,gB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClB1B;AAAA;AAAA;AACA;AACA,UAAU,gBAAgB,sCAAsC,iBAAiB,EAAE;AACnF,yBAAyB,uDAAuD;AAChF;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACqB;AACkG;AAClG;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACO;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,mDAAmD,QAAQ;AAC3D;AACA;AACA,yBAAyB;AACzB,gBAAgB;AAChB;AACA,8DAA8D,QAAQ;AACtE;AACA;AACA,sBAAsB;AACtB;AACA,uDAAuD;AACvD;AACA;AACA,sBAAsB;AACtB;AACA,yDAAyD,QAAQ;AACjE;AACA;AACA,gBAAgB;AAChB;AACA,oDAAoD,QAAQ;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,CAAC;AACO;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,oDAAoD,QAAQ;AAC5D;AACA;AACA,yBAAyB;AACzB,gBAAgB;AAChB;AACA,+DAA+D,QAAQ;AACvE;AACA;AACA,sBAAsB;AACtB;AACA,0DAA0D,QAAQ;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,CAAC;AACO;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,WAAW,YAAY;AACvB;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,kBAAkB;AAClB,cAAc;AACd;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C,uBAAuB,iBAAiB;AACxC,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,0EAAmB;AAC5B;AACA;AACA,6CAA6C,WAAW;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,CAAC;AACO;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,OAAO;AAChC,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,uBAAuB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,yBAAyB,OAAO;AAChC,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,uBAAuB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,mBAAmB;AACnB;AACA,8CAA8C,QAAQ;AACtD;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB,wBAAwB,QAAQ;AAChC;AACA,+DAA+D;AAC/D;AACA;AACA,mBAAmB,OAAO;AAC1B,sBAAsB,IAAI;AAC1B,0BAA0B,OAAO;AACjC,yBAAyB,QAAQ;AACjC;AACA,8EAA8E;AAC9E;AACA;AACA,mBAAmB,OAAO;AAC1B,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,uBAAuB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,uBAAuB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA,yBAAyB,OAAO;AAChC,0BAA0B,IAAI;AAC9B;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,OAAO;AAChC,wBAAwB,SAAS;AACjC;AACA,8EAA8E;AAC9E;AACA;AACA;AACA,yBAAyB,OAAO;AAChC,wBAAwB,SAAS;AACjC;AACA,8DAA8D;AAC9D;AACA,2FAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,2FAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,0FAAsB,aAAa;AACnC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC;AACO;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,QAAQ;AACjC;AACA,0DAA0D;AAC1D;AACA;AACA,kBAAkB;AAClB;AACA,sDAAsD;AACtD;AACA;AACA,kBAAkB;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,kBAAkB;AAClB,gBAAgB,cAAc;AAC9B;AACA,kDAAkD,QAAQ;AAC1D;AACA;AACA;AACA,kBAAkB;AAClB,wBAAwB;AACxB,gBAAgB,aAAa;AAC7B;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,kBAAkB;AAClB,wBAAwB;AACxB,gBAAgB,aAAa;AAC7B;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,kBAAkB;AAClB,gBAAgB,IAAI;AACpB;AACA,qDAAqD,QAAQ;AAC7D;AACA;AACA,kBAAkB;AAClB,wBAAwB;AACxB,gBAAgB,aAAa;AAC7B;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,gBAAgB;AAChB;AACA,qDAAqD,QAAQ;AAC7D;AACA;AACA,qBAAqB;AACrB,gBAAgB;AAChB;AACA,uDAAuD;AACvD;AACA;AACA,gBAAgB;AAChB;AACA,sDAAsD,QAAQ;AAC9D;AACA;AACA,uBAAuB;AACvB,gBAAgB;AAChB;AACA,2DAA2D,QAAQ;AACnE;AACA;AACA;AACA,oDAAoD;AACpD;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA,qBAAqB;AACrB,uBAAuB;AACvB,yBAAyB,QAAQ;AACjC,gBAAgB;AAChB;AACA,6EAA6E;AAC7E;AACA;AACA,yBAAyB,QAAQ;AACjC,gBAAgB;AAChB;AACA,wDAAwD,QAAQ;AAChE;AACA;AACA,uBAAuB;AACvB,yBAAyB,QAAQ;AACjC;AACA,kEAAkE;AAClE;AACA;AACA,qBAAqB;AACrB,yBAAyB,QAAQ;AACjC;AACA,oEAAoE,QAAQ;AAC5E;AACA;AACA,qBAAqB;AACrB,uBAAuB;AACvB,yBAAyB,QAAQ;AACjC;AACA,0EAA0E;AAC1E;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,CAAC;AACO;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,0CAA0C,QAAQ;AAClD;AACA;AACA,gBAAgB;AAChB;AACA,2CAA2C,kBAAkB;AAC7D;AACA;AACA,sBAAsB;AACtB;AACA,oDAAoD;AACpD;AACA;AACA,gBAAgB;AAChB;AACA,8CAA8C,QAAQ;AACtD;AACA;AACA,gBAAgB;AAChB;AACA,8CAA8C,QAAQ;AACtD;AACA;AACA,sBAAsB;AACtB;AACA,oDAAoD;AACpD;AACA;AACA,qBAAqB;AACrB;AACA,sDAAsD;AACtD;AACA;AACA,gBAAgB;AAChB;AACA,iDAAiD,QAAQ;AACzD;AACA;AACA,2BAA2B;AAC3B;AACA,8DAA8D;AAC9D;AACA;AACA,gBAAgB;AAChB;AACA,mDAAmD,QAAQ;AAC3D;AACA;AACA,2BAA2B;AAC3B;AACA,8DAA8D;AAC9D;AACA;AACA,gBAAgB;AAChB;AACA,mDAAmD,QAAQ;AAC3D;AACA;AACA,yBAAyB;AACzB;AACA,0DAA0D;AAC1D;AACA;AACA,gBAAgB;AAChB;AACA,iDAAiD,QAAQ;AACzD;AACA;AACA,sBAAsB;AACtB;AACA,oDAAoD;AACpD;AACA;AACA,gBAAgB;AAChB;AACA,8CAA8C,QAAQ;AACtD;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA,gBAAgB;AAChB;AACA,8CAA8C,QAAQ;AACtD;AACA;AACA,uBAAuB;AACvB;AACA,sDAAsD;AACtD;AACA;AACA,gBAAgB;AAChB;AACA,+CAA+C,QAAQ;AACvD;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,CAAC;AACO;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,+EAA+E,sBAAsB,EAAE;AACvG,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,CAAC;AACO;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,gBAAgB;AAC/B,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,CAAC;AACO;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC;AACO;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B,0BAA0B,OAAO;AACjC,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,yCAAyC;AAC7D,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,CAAC;AACO;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB,oBAAoB;AACpB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB,oBAAoB;AACpB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC;AACO;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,yBAAyB;AACzB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,wBAAwB;AACxB,uBAAuB;AACvB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,QAAQ;AAC1B,wBAAwB,OAAO;AAC/B,uBAAuB,OAAO;AAC9B,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,yCAAyC;AAC7D,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,yCAAyC;AAC7D,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,kBAAkB;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,QAAQ;AAC5B,kBAAkB,QAAQ;AAC1B,wBAAwB,OAAO;AAC/B,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,CAAC;AACO;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,8CAA8C,QAAQ;AACtD;AACA;AACA,yBAAyB;AACzB;AACA,6DAA6D;AAC7D;AACA;AACA,gBAAgB;AAChB;AACA,mEAAmE,QAAQ;AAC3E;AACA;AACA,gBAAgB;AAChB;AACA,2DAA2D,QAAQ;AACnE;AACA;AACA,gBAAgB;AAChB;AACA,4DAA4D,QAAQ;AACpE;AACA;AACA,gBAAgB;AAChB;AACA,gEAAgE,QAAQ;AACxE;AACA;AACA,gBAAgB;AAChB;AACA,wDAAwD,QAAQ;AAChE;AACA;AACA,gBAAgB;AAChB;AACA,yDAAyD,QAAQ;AACjE;AACA;AACA,gBAAgB;AAChB;AACA,yDAAyD,QAAQ;AACjE;AACA;AACA,gBAAgB;AAChB;AACA,uDAAuD,QAAQ;AAC/D;AACA;AACA,gBAAgB;AAChB;AACA,qDAAqD,QAAQ;AAC7D;AACA;AACA,gBAAgB;AAChB;AACA,wDAAwD,QAAQ;AAChE;AACA;AACA,gBAAgB;AAChB;AACA,qDAAqD,QAAQ;AAC7D;AACA;AACA,sBAAsB;AACtB;AACA,6DAA6D;AAC7D;AACA;AACA,yBAAyB,OAAO;AAChC;AACA,8DAA8D;AAC9D;AACA;AACA,yBAAyB,OAAO;AAChC;AACA,8DAA8D;AAC9D;AACA;AACA,uBAAuB;AACvB;AACA,+DAA+D;AAC/D;AACA;AACA,iBAAiB;AACjB,iBAAiB;AACjB;AACA,iDAAiD;AACjD;AACA;AACA,gBAAgB;AAChB;AACA,wDAAwD,QAAQ;AAChE;AACA;AACA,gBAAgB;AAChB;AACA,4DAA4D,QAAQ;AACpE;AACA;AACA,2BAA2B;AAC3B;AACA,+DAA+D;AAC/D;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,sDAAsD,kBAAkB,EAAE;AAC1E,SAAS;AACT;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,qDAAqD,kBAAkB,EAAE;AACzE,SAAS;AACT;AACA;AACA;AACA,gBAAgB;AAChB;AACA,+DAA+D,QAAQ;AACvE;AACA;AACA,gBAAgB;AAChB;AACA,8DAA8D,QAAQ;AACtE;AACA;AACA,uBAAuB;AACvB;AACA,mEAAmE;AACnE;AACA;AACA,uBAAuB;AACvB;AACA,yEAAyE;AACzE;AACA;AACA,gBAAgB;AAChB;AACA,0DAA0D,QAAQ;AAClE;AACA;AACA,uBAAuB;AACvB;AACA,+DAA+D;AAC/D;AACA;AACA,uBAAuB;AACvB;AACA,gEAAgE;AAChE;AACA;AACA,uBAAuB;AACvB;AACA,gEAAgE;AAChE;AACA;AACA,uBAAuB;AACvB;AACA,oEAAoE;AACpE;AACA;AACA,uBAAuB;AACvB;AACA,yDAAyD;AACzD;AACA;AACA,mBAAmB;AACnB,qBAAqB;AACrB,oBAAoB;AACpB,sBAAsB;AACtB;AACA,0EAA0E;AAC1E;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA,uBAAuB,cAAc;AACrC,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,uBAAuB,cAAc;AACrC,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,uBAAuB,eAAe;AACtC,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,uBAAuB,mBAAmB;AAC1C,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC,gBAAgB;AAChB;AACA,wDAAwD,QAAQ;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,CAAC;AACO;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,iDAAiD,QAAQ;AACzD;AACA;AACA,gBAAgB;AAChB;AACA,kDAAkD,kBAAkB;AACpE;AACA;AACA,sBAAsB;AACtB;AACA,2DAA2D;AAC3D;AACA;AACA,uBAAuB;AACvB;AACA,6DAA6D;AAC7D;AACA;AACA;AACA,sDAAsD,QAAQ;AAC9D;AACA;AACA,wBAAwB,OAAO;AAC/B;AACA,4DAA4D;AAC5D;AACA;AACA;AACA,uBAAuB;AACvB;AACA,6DAA6D;AAC7D;AACA;AACA,gBAAgB;AAChB;AACA,sDAAsD,QAAQ;AAC9D;AACA;AACA,yBAAyB;AACzB;AACA,iEAAiE;AACjE;AACA;AACA,gBAAgB;AAChB;AACA,wDAAwD,QAAQ;AAChE;AACA;AACA,uBAAuB;AACvB;AACA,6DAA6D;AAC7D;AACA;AACA,gBAAgB;AAChB;AACA,sDAAsD,QAAQ;AAC9D;AACA;AACA,qBAAqB;AACrB;AACA,0DAA0D;AAC1D;AACA;AACA,gBAAgB;AAChB;AACA,qDAAqD,QAAQ;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACO;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,oEAAoE;AACpE;AACA;AACA,uBAAuB,IAAI;AAC3B,2BAA2B,IAAI;AAC/B;AACA,0EAA0E;AAC1E;AACA;AACA,sBAAsB;AACtB;AACA,uDAAuD;AACvD;AACA;AACA;AACA,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,CAAC;AACO;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,0CAA0C,QAAQ;AAClD;AACA;AACA,gBAAgB;AAChB;AACA,2CAA2C,kBAAkB;AAC7D;AACA;AACA,sBAAsB;AACtB;AACA,sDAAsD,QAAQ;AAC9D;AACA;AACA,gBAAgB;AAChB;AACA,gDAAgD,QAAQ;AACxD;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA,yBAAyB;AACzB;AACA,0DAA0D;AAC1D;AACA;AACA,8BAA8B;AAC9B;AACA,oEAAoE;AACpE;AACA;AACA;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA,8CAA8C,QAAQ;AACtD;AACA;AACA,qBAAqB;AACrB;AACA,kDAAkD;AAClD;AACA;AACA,gBAAgB;AAChB;AACA,6CAA6C,QAAQ;AACrD;AACA;AACA,uBAAuB;AACvB;AACA,sDAAsD;AACtD;AACA;AACA,gBAAgB;AAChB;AACA,+CAA+C,QAAQ;AACvD;AACA;AACA,qBAAqB,OAAO;AAC5B;AACA,oDAAoD;AACpD;AACA;AACA,gBAAgB,OAAO;AACvB;AACA,+CAA+C,QAAQ;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB;AACA,sDAAsD;AACtD;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB;AACA,4DAA4D;AAC5D;AACA;AACA,gBAAgB;AAChB;AACA,sDAAsD,QAAQ;AAC9D;AACA;AACA,iBAAiB,OAAO;AACxB;AACA,oDAAoD;AACpD;AACA;AACA,gBAAgB;AAChB;AACA,8CAA8C,QAAQ;AACtD;AACA;AACA,yBAAyB;AACzB;AACA,0DAA0D;AAC1D;AACA;AACA,gBAAgB;AAChB;AACA,gDAAgD,QAAQ;AACxD;AACA;AACA,oBAAoB;AACpB;AACA,gDAAgD,QAAQ;AACxD;AACA;AACA;AACA;AACA,gDAAgD,QAAQ;AACxD;AACA;AACA,wBAAwB;AACxB;AACA,wDAAwD;AACxD;AACA;AACA,gBAAgB;AAChB;AACA,gDAAgD,QAAQ;AACxD;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,CAAC;AACO;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,iDAAiD,QAAQ;AACzD;AACA;AACA,sBAAsB,cAAc;AACpC,2BAA2B,QAAQ;AACnC;AACA,uEAAuE;AACvE;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,kDAAkD,kBAAkB;AACpE;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACO;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,2CAA2C,QAAQ;AACnD;AACA;AACA,gBAAgB;AAChB;AACA,4CAA4C,kBAAkB;AAC9D;AACA;AACA,sBAAsB;AACtB;AACA,qDAAqD;AACrD;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,mDAAmD;AACnD;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,2DAA2D;AAC3D;AACA;AACA,gBAAgB;AAChB;AACA,kDAAkD,QAAQ;AAC1D;AACA;AACA,2BAA2B;AAC3B;AACA,+DAA+D;AAC/D;AACA;AACA,gBAAgB;AAChB;AACA,oDAAoD,QAAQ;AAC5D;AACA;AACA,yBAAyB;AACzB;AACA,2DAA2D;AAC3D;AACA;AACA;AACA,kDAAkD,QAAQ;AAC1D;AACA;AACA,uBAAuB;AACvB;AACA,uDAAuD;AACvD;AACA;AACA,gBAAgB;AAChB;AACA,gDAAgD,QAAQ;AACxD;AACA;AACA,sBAAsB;AACtB;AACA,qDAAqD;AACrD;AACA;AACA,gBAAgB;AAChB;AACA,+CAA+C,QAAQ;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D;AAC/D;AACA;AACA;AACA,oDAAoD,QAAQ;AAC5D;AACA;AACA,wBAAwB;AACxB;AACA,yDAAyD;AACzD;AACA;AACA,gBAAgB;AAChB;AACA,iDAAiD,QAAQ;AACzD;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,CAAC;AACO;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA,gBAAgB;AAChB;AACA,6CAA6C,kBAAkB;AAC/D;AACA;AACA,sBAAsB;AACtB;AACA,sDAAsD;AACtD;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA,0DAA0D;AAC1D;AACA;AACA;AACA,kDAAkD,QAAQ;AAC1D;AACA;AACA,uBAAuB;AACvB;AACA,wDAAwD;AACxD;AACA;AACA,gBAAgB;AAChB;AACA,iDAAiD,QAAQ;AACzD;AACA;AACA,yBAAyB;AACzB;AACA,4DAA4D;AAC5D;AACA;AACA,gBAAgB;AAChB;AACA,mDAAmD,QAAQ;AAC3D;AACA;AACA,2BAA2B;AAC3B;AACA,gEAAgE;AAChE;AACA;AACA,gBAAgB;AAChB;AACA,qDAAqD,QAAQ;AAC7D;AACA;AACA,2BAA2B;AAC3B;AACA,gEAAgE;AAChE;AACA;AACA,gBAAgB;AAChB;AACA,qDAAqD,QAAQ;AAC7D;AACA;AACA,qBAAqB;AACrB;AACA,qDAAqD;AACrD;AACA;AACA,gBAAgB;AAChB;AACA,gDAAgD,QAAQ;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACO;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,+CAA+C,QAAQ;AACvD;AACA;AACA,gBAAgB;AAChB;AACA,gDAAgD,kBAAkB;AAClE;AACA;AACA,sBAAsB;AACtB;AACA,yDAAyD;AACzD;AACA;AACA,gBAAgB;AAChB;AACA,mDAAmD,QAAQ;AAC3D;AACA;AACA,sBAAsB;AACtB;AACA,yDAAyD;AACzD;AACA;AACA,gBAAgB;AAChB;AACA,mDAAmD,QAAQ;AAC3D;AACA;AACA,uBAAuB;AACvB;AACA,2DAA2D;AAC3D;AACA;AACA,gBAAgB;AAChB;AACA,oDAAoD,QAAQ;AAC5D;AACA;AACA,uBAAuB;AACvB;AACA,2DAA2D;AAC3D;AACA;AACA,gBAAgB;AAChB;AACA,oDAAoD,QAAQ;AAC5D;AACA;AACA;AACA,qDAAqD,QAAQ;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACO;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,2DAA2D,QAAQ;AACnE;AACA;AACA,gBAAgB;AAChB;AACA,8CAA8C,QAAQ;AACtD;AACA;AACA,gBAAgB;AAChB;AACA,+CAA+C,kBAAkB;AACjE;AACA;AACA,uBAAuB;AACvB;AACA,0DAA0D;AAC1D;AACA;AACA,gBAAgB;AAChB;AACA,mDAAmD,QAAQ;AAC3D;AACA;AACA,yBAAyB;AACzB;AACA,8DAA8D;AAC9D;AACA;AACA,gBAAgB;AAChB;AACA,qDAAqD,QAAQ;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,6FAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACO;AACR,iC","file":"1.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { IonicPageModule } from 'ionic-angular';\nimport { MemberMapPage } from './member-map';\n\n@NgModule({\n  declarations: [\n    MemberMapPage,\n  ],\n  imports: [\n    IonicPageModule.forChild(MemberMapPage),\n  ],\n})\nexport class MemberMapPageModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/member-map/member-map.module.ts","import { Component, ViewChild, ElementRef } from '@angular/core';\nimport { IonicPage, NavController, NavParams, Platform } from 'ionic-angular';\nimport { EpxProvider } from '../../providers/epx/epx';\nimport {\n  GoogleMaps,\n  GoogleMap,\n  GoogleMapsEvent,\n  GoogleMapOptions,\n  CameraPosition,\n  MarkerOptions,\n  Marker\n} from '@ionic-native/google-maps';\n\n@IonicPage()\n@Component({\n  selector: 'page-member-map',\n  templateUrl: 'member-map.html',\n})\nexport class MemberMapPage {\n  @ViewChild('map') canvass: ElementRef;\n  map: GoogleMap;\n  members: any;\n  isLoading: boolean = true;\n  constructor(\n    private platform: Platform,\n    private provider: EpxProvider, public navCtrl: NavController, public navParams: NavParams) {\n  }\n  ionViewWillEnter(){\n    let backAction = this.platform.registerBackButtonAction(() => {\n      this.navCtrl.pop();\n      backAction();\n    },2);\n  }\n  ionViewDidLoad() {\n    console.log('ionViewDidLoad MemberMapPage');\n    this.loadMap();\n  }\n  loadMap() {\n    this.provider.getMemberMapSearch().subscribe(res => {\n      this.members = Object.keys(res).map(key => res[key]);\n      let lat = Number(this.members[0].latitude);\n      let lng = Number(this.members[0].longitude);\n      let mapOptions: GoogleMapOptions = {\n        mapType: 'MAP_TYPE_ROADMAP',\n        camera: {\n          target: {\n            lat: lat,\n            lng: lng\n          },\n          zoom: 2,\n          tilt: 50,\n        }\n      };\n      this.map = GoogleMaps.create(this.canvass.nativeElement, mapOptions);\n      this.members.forEach(item => {\n        let lat = Number(item.latitude);\n        let lng = Number(item.longitude);\n        // Wait the MAP_READY before using any methods.\n        this.map.one(GoogleMapsEvent.MAP_READY)\n          .then(() => {\n            console.log('Map is ready!');\n            // Now you can use all methods safely.\n            this.map.addMarker({\n              title: item.name,\n              icon: '#0da2e8',\n              snippet: item.Business,\n              animation: 'DROP',\n              position: {\n                lat: lat,\n                lng: lng\n              }\n            }).then(marker => {\n              marker.set('member', item),\n                marker.on(GoogleMapsEvent.INFO_CLICK)\n                  .subscribe(() => {\n                    let member = marker.get('member');\n                    this.navCtrl.push('MemberDetailsPage', { data: member });\n                  });\n            });\n          },error =>{\n            this.provider.toastMessage('Internal error.');\n          });\n      });\n\n      this.isLoading = false;\n    }, error => {\n      this.provider.toastMessage('Internal error!');\n    })\n\n\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/member-map/member-map.ts","var __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nimport { Injectable } from '@angular/core';\r\nimport { CordovaCheck, CordovaInstance, Plugin, InstanceProperty, InstanceCheck, checkAvailability, IonicNativePlugin } from '@ionic-native/core';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/observable/fromEvent';\r\n/**\r\n * @hidden\r\n */\r\nvar LatLng = (function () {\r\n    function LatLng(lat, lng) {\r\n        this.lat = lat;\r\n        this.lng = lng;\r\n    }\r\n    LatLng.prototype.equals = function (other) {\r\n        return this.lat === other.lat && this.lng === other.lng;\r\n    };\r\n    LatLng.prototype.toString = function () {\r\n        return this.lat + ',' + this.lng;\r\n    };\r\n    LatLng.prototype.toUrlValue = function (precision) {\r\n        precision = precision || 6;\r\n        return this.lat.toFixed(precision) + ',' + this.lng.toFixed(precision);\r\n    };\r\n    return LatLng;\r\n}());\r\nexport { LatLng };\r\n/**\r\n * @hidden\r\n */\r\nvar LatLngBounds = (function () {\r\n    function LatLngBounds(points) {\r\n        this._objectInstance = new (GoogleMaps.getPlugin()).LatLngBounds(points);\r\n    }\r\n    /**\r\n     * Converts to string\r\n     * @return {string}\r\n     */\r\n    LatLngBounds.prototype.toString = function () { return; };\r\n    /**\r\n     * Returns a string of the form \"lat_sw,lng_sw,lat_ne,lng_ne\" for this bounds, where \"sw\" corresponds to the southwest corner of the bounding box, while \"ne\" corresponds to the northeast corner of that box.\r\n     * @param precision {number}\r\n     * @return {string}\r\n     */\r\n    LatLngBounds.prototype.toUrlValue = function (precision) { return; };\r\n    /**\r\n     * Extends this bounds to contain the given point.\r\n     * @param LatLng {ILatLng}\r\n     */\r\n    LatLngBounds.prototype.extend = function (latLng) { };\r\n    /**\r\n     * Returns true if the given lat/lng is in this bounds.\r\n     * @param LatLng {ILatLng}\r\n     */\r\n    LatLngBounds.prototype.contains = function (LatLng) { return; };\r\n    /**\r\n     * Computes the center of this LatLngBounds\r\n     * @return {LatLng}\r\n     */\r\n    LatLngBounds.prototype.getCenter = function () { return; };\r\n    __decorate([\r\n        InstanceProperty,\r\n        __metadata(\"design:type\", Object)\r\n    ], LatLngBounds.prototype, \"northeast\", void 0);\r\n    __decorate([\r\n        InstanceProperty,\r\n        __metadata(\"design:type\", Object)\r\n    ], LatLngBounds.prototype, \"southwest\", void 0);\r\n    __decorate([\r\n        InstanceProperty,\r\n        __metadata(\"design:type\", String)\r\n    ], LatLngBounds.prototype, \"type\", void 0);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", String)\r\n    ], LatLngBounds.prototype, \"toString\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Number]),\r\n        __metadata(\"design:returntype\", String)\r\n    ], LatLngBounds.prototype, \"toUrlValue\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Object]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], LatLngBounds.prototype, \"extend\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Object]),\r\n        __metadata(\"design:returntype\", Boolean)\r\n    ], LatLngBounds.prototype, \"contains\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", LatLng)\r\n    ], LatLngBounds.prototype, \"getCenter\", null);\r\n    return LatLngBounds;\r\n}());\r\nexport { LatLngBounds };\r\n/**\r\n * @hidden\r\n */\r\nvar VisibleRegion = (function () {\r\n    function VisibleRegion(southwest, northeast, farLeft, farRight, nearLeft, nearRight) {\r\n        this._objectInstance = new (GoogleMaps.getPlugin()).VisibleRegion(southwest, northeast, farLeft, farRight, nearLeft, nearRight);\r\n    }\r\n    /**\r\n     * Converts to string\r\n     * @return {string}\r\n     */\r\n    VisibleRegion.prototype.toString = function () { return; };\r\n    /**\r\n     * Returns a string of the form \"lat_sw,lng_sw,lat_ne,lng_ne\" for this bounds, where \"sw\" corresponds to the southwest corner of the bounding box, while \"ne\" corresponds to the northeast corner of that box.\r\n     * @param precision {number}\r\n     * @return {string}\r\n     */\r\n    VisibleRegion.prototype.toUrlValue = function (precision) { return; };\r\n    /**\r\n     * Returns true if the given lat/lng is in this bounds.\r\n     * @param LatLng {ILatLng}\r\n     */\r\n    VisibleRegion.prototype.contains = function (LatLng) { return; };\r\n    __decorate([\r\n        InstanceProperty,\r\n        __metadata(\"design:type\", Object)\r\n    ], VisibleRegion.prototype, \"northeast\", void 0);\r\n    __decorate([\r\n        InstanceProperty,\r\n        __metadata(\"design:type\", Object)\r\n    ], VisibleRegion.prototype, \"southwest\", void 0);\r\n    __decorate([\r\n        InstanceProperty,\r\n        __metadata(\"design:type\", Object)\r\n    ], VisibleRegion.prototype, \"farLeft\", void 0);\r\n    __decorate([\r\n        InstanceProperty,\r\n        __metadata(\"design:type\", Object)\r\n    ], VisibleRegion.prototype, \"farRight\", void 0);\r\n    __decorate([\r\n        InstanceProperty,\r\n        __metadata(\"design:type\", Object)\r\n    ], VisibleRegion.prototype, \"nearLeft\", void 0);\r\n    __decorate([\r\n        InstanceProperty,\r\n        __metadata(\"design:type\", Object)\r\n    ], VisibleRegion.prototype, \"nearRight\", void 0);\r\n    __decorate([\r\n        InstanceProperty,\r\n        __metadata(\"design:type\", String)\r\n    ], VisibleRegion.prototype, \"type\", void 0);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", String)\r\n    ], VisibleRegion.prototype, \"toString\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Number]),\r\n        __metadata(\"design:returntype\", String)\r\n    ], VisibleRegion.prototype, \"toUrlValue\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Object]),\r\n        __metadata(\"design:returntype\", Boolean)\r\n    ], VisibleRegion.prototype, \"contains\", null);\r\n    return VisibleRegion;\r\n}());\r\nexport { VisibleRegion };\r\n/**\r\n * @hidden\r\n * You can listen to these events where appropriate\r\n */\r\nexport var GoogleMapsEvent = {\r\n    MAP_READY: 'map_ready',\r\n    MAP_CLICK: 'map_click',\r\n    MAP_LONG_CLICK: 'map_long_click',\r\n    POI_CLICK: 'poi_click',\r\n    MY_LOCATION_CLICK: 'my_location_click',\r\n    MY_LOCATION_BUTTON_CLICK: 'my_location_button_click',\r\n    INDOOR_BUILDING_FOCUSED: 'indoor_building_focused',\r\n    INDOOR_LEVEL_ACTIVATED: 'indoor_level_activated',\r\n    CAMERA_MOVE_START: 'camera_move_start',\r\n    CAMERA_MOVE: 'camera_move',\r\n    CAMERA_MOVE_END: 'camera_move_end',\r\n    OVERLAY_CLICK: 'overlay_click',\r\n    POLYGON_CLICK: 'polygon_click',\r\n    POLYLINE_CLICK: 'polyline_click',\r\n    CIRCLE_CLICK: 'circle_click',\r\n    GROUND_OVERLAY_CLICK: 'groundoverlay_click',\r\n    INFO_CLICK: 'info_click',\r\n    INFO_LONG_CLICK: 'info_long_click',\r\n    INFO_CLOSE: 'info_close',\r\n    INFO_OPEN: 'info_open',\r\n    MARKER_CLICK: 'marker_click',\r\n    MARKER_DRAG: 'marker_drag',\r\n    MARKER_DRAG_START: 'marker_drag_start',\r\n    MARKER_DRAG_END: 'marker_drag_end',\r\n    MAP_DRAG: 'map_drag',\r\n    MAP_DRAG_START: 'map_drag_start',\r\n    MAP_DRAG_END: 'map_drag_end',\r\n    KML_CLICK: 'kml_click'\r\n};\r\n/**\r\n * @hidden\r\n */\r\nexport var GoogleMapsAnimation = {\r\n    BOUNCE: 'BOUNCE',\r\n    DROP: 'DROP'\r\n};\r\n/**\r\n * @hidden\r\n */\r\nexport var GoogleMapsMapTypeId = {\r\n    NORMAL: 'MAP_TYPE_NORMAL',\r\n    ROADMAP: 'MAP_TYPE_ROADMAP',\r\n    SATELLITE: 'MAP_TYPE_SATELLITE',\r\n    HYBRID: 'MAP_TYPE_HYBRID',\r\n    TERRAIN: 'MAP_TYPE_TERRAIN',\r\n    NONE: 'MAP_TYPE_NONE'\r\n};\r\n/**\r\n * @name Google Maps\r\n * @description\r\n * This plugin uses the native Google Maps SDK\r\n * Note: As of Ionic native 4.0, this using the 2.0 version of the google maps plugin. Please make sure your plugin is updated\r\n * @usage\r\n * ```typescript\r\n * import {\r\n *  GoogleMaps,\r\n *  GoogleMap,\r\n *  GoogleMapsEvent,\r\n *  GoogleMapOptions,\r\n *  CameraPosition,\r\n *  MarkerOptions,\r\n *  Marker\r\n * } from '@ionic-native/google-maps';\r\n * import { Component } from \"@angular/core/\";\r\n *\r\n * @Component({\r\n *   selector: 'page-home',\r\n *   templateUrl: 'home.html'\r\n * })\r\n * export class HomePage {\r\n *   map: GoogleMap;\r\n *   constructor() { }\r\n *\r\n *   ionViewDidLoad() {\r\n *    this.loadMap();\r\n *   }\r\n *\r\n *  loadMap() {\r\n *\r\n *     let mapOptions: GoogleMapOptions = {\r\n *       camera: {\r\n *         target: {\r\n *           lat: 43.0741904,\r\n *           lng: -89.3809802\r\n *         },\r\n *         zoom: 18,\r\n *         tilt: 30\r\n *       }\r\n *     };\r\n *\r\n *     this.map = GoogleMaps.create('map_canvas', mapOptions);\r\n *\r\n *     // Wait the MAP_READY before using any methods.\r\n *     this.map.one(GoogleMapsEvent.MAP_READY)\r\n *       .then(() => {\r\n *         console.log('Map is ready!');\r\n *\r\n *         // Now you can use all methods safely.\r\n *         this.map.addMarker({\r\n *             title: 'Ionic',\r\n *             icon: 'blue',\r\n *             animation: 'DROP',\r\n *             position: {\r\n *               lat: 43.0741904,\r\n *               lng: -89.3809802\r\n *             }\r\n *           })\r\n *           .then(marker => {\r\n *             marker.on(GoogleMapsEvent.MARKER_CLICK)\r\n *               .subscribe(() => {\r\n *                 alert('clicked');\r\n *               });\r\n *           });\r\n *\r\n *       });\r\n *   }\r\n * }\r\n *\r\n * ```\r\n * @classes\r\n * GoogleMap\r\n * Circle\r\n * Encoding\r\n * Environment\r\n * Geocoder\r\n * GroundOverlay\r\n * HtmlInfoWindow\r\n * Geocoder\r\n * LatLng\r\n * LatLngBounds\r\n * Marker\r\n * MarkerCluster\r\n * Polygon\r\n * Polyline\r\n * Spherical\r\n * KmlOverlay\r\n * Poly\r\n * TileOverlay\r\n * BaseClass\r\n * BaseArrayClass\r\n * @interfaces\r\n * GoogleMapOptions\r\n * CameraPosition\r\n * CircleOptions\r\n * GeocoderRequest\r\n * GeocoderResult\r\n * GroundOverlayOptions\r\n * ILatLng\r\n * MarkerIcon\r\n * MarkerOptions\r\n * MarkerClusterIcon\r\n * MarkerClusterOptions\r\n * MyLocation\r\n * MyLocationOptions\r\n * PolygonOptions\r\n * PolylineOptions\r\n * TileOverlayOptions\r\n * KmlOverlayOptions\r\n * VisibleRegion\r\n */\r\nvar GoogleMaps = (function (_super) {\r\n    __extends(GoogleMaps, _super);\r\n    function GoogleMaps() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    GoogleMaps_1 = GoogleMaps;\r\n    /**\r\n     * Creates a new GoogleMap instance\r\n     * @param element {string | HTMLElement} Element ID or reference to attach the map to\r\n     * @param options {GoogleMapOptions} [options] Options\r\n     * @return {GoogleMap}\r\n     */\r\n    GoogleMaps.create = function (element, options) {\r\n        if (element instanceof HTMLElement) {\r\n            if (element.getAttribute('__pluginMapId')) {\r\n                console.error('GoogleMaps', element.tagName + '[__pluginMapId=\\'' + element.getAttribute('__pluginMapId') + '\\'] has already map.');\r\n                return;\r\n            }\r\n        }\r\n        else if (typeof element === 'object') {\r\n            options = element;\r\n            element = null;\r\n        }\r\n        var googleMap = new GoogleMap(element, options);\r\n        googleMap.set('_overlays', {});\r\n        return googleMap;\r\n    };\r\n    /**\r\n     * @deprecation\r\n     * @hidden\r\n     */\r\n    GoogleMaps.prototype.create = function (element, options) {\r\n        console.error('GoogleMaps', '[deprecated] Please use GoogleMaps.create()');\r\n        return GoogleMaps_1.create(element, options);\r\n    };\r\n    GoogleMaps.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    /** @nocollapse */\r\n    GoogleMaps.ctorParameters = function () { return []; };\r\n    GoogleMaps = GoogleMaps_1 = __decorate([\r\n        Plugin({\r\n            pluginName: 'GoogleMaps',\r\n            pluginRef: 'plugin.google.maps',\r\n            plugin: 'cordova-plugin-googlemaps',\r\n            repo: 'https://github.com/mapsplugin/cordova-plugin-googlemaps',\r\n            document: 'https://github.com/mapsplugin/cordova-plugin-googlemaps-doc/blob/master/v2.0.0/README.md',\r\n            install: 'ionic cordova plugin add cordova-plugin-googlemaps --variable API_KEY_FOR_ANDROID=\"YOUR_ANDROID_API_KEY_IS_HERE\" --variable API_KEY_FOR_IOS=\"YOUR_IOS_API_KEY_IS_HERE\"',\r\n            installVariables: ['API_KEY_FOR_ANDROID', 'API_KEY_FOR_IOS'],\r\n            platforms: ['Android', 'iOS']\r\n        })\r\n    ], GoogleMaps);\r\n    return GoogleMaps;\r\n    var GoogleMaps_1;\r\n}(IonicNativePlugin));\r\nexport { GoogleMaps };\r\n/**\r\n * @hidden\r\n * https://github.com/mapsplugin/cordova-plugin-googlemaps-doc/blob/master/v2.0.0/class/BaseClass/README.md\r\n */\r\nvar BaseClass = (function () {\r\n    function BaseClass() {\r\n    }\r\n    /**\r\n     * Adds an event listener.\r\n     * @param eventName {string} event name you want to observe.\r\n     * @return {Observable<any>}\r\n     */\r\n    BaseClass.prototype.addEventListener = function (eventName) {\r\n        var _this = this;\r\n        return new Observable(function (observer) {\r\n            _this._objectInstance.on(eventName, function () {\r\n                var args = [];\r\n                for (var _i = 0; _i < arguments.length; _i++) {\r\n                    args[_i] = arguments[_i];\r\n                }\r\n                if (args[args.length - 1] instanceof GoogleMaps.getPlugin().BaseClass) {\r\n                    if (args[args.length - 1].type === 'Map') {\r\n                        args[args.length - 1] = _this;\r\n                    }\r\n                    else if (_this instanceof MarkerCluster) {\r\n                        var overlay = _this.get(args[args.length - 1].getId());\r\n                        if (!overlay) {\r\n                            var markerJS = args[args.length - 1];\r\n                            var markerId_1 = markerJS.getId();\r\n                            var markerCluster = _this;\r\n                            overlay = new Marker(markerCluster.getMap(), markerJS);\r\n                            _this.get('_overlays')[markerId_1] = overlay;\r\n                            markerJS.one(markerJS.getId() + '_remove', function () {\r\n                                _this.get('_overlays')[markerId_1] = null;\r\n                            });\r\n                        }\r\n                        args[args.length - 1] = overlay;\r\n                    }\r\n                    else {\r\n                        args[args.length - 1] = _this._objectInstance.getMap().get('_overlays')[args[args.length - 1].getId()];\r\n                    }\r\n                }\r\n                observer.next(args);\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Adds an event listener that works once.\r\n     * @param eventName {string} event name you want to observe.\r\n     * @return {Promise<any>}\r\n     */\r\n    BaseClass.prototype.addListenerOnce = function (eventName) {\r\n        var _this = this;\r\n        return new Promise(function (resolve) {\r\n            _this._objectInstance.one(eventName, function () {\r\n                var args = [];\r\n                for (var _i = 0; _i < arguments.length; _i++) {\r\n                    args[_i] = arguments[_i];\r\n                }\r\n                if (args[args.length - 1] instanceof GoogleMaps.getPlugin().BaseClass) {\r\n                    if (args[args.length - 1].type === 'Map') {\r\n                        args[args.length - 1] = _this;\r\n                    }\r\n                    else if (_this instanceof MarkerCluster) {\r\n                        var overlay = _this.get(args[args.length - 1].getId());\r\n                        if (!overlay) {\r\n                            var markerJS = args[args.length - 1];\r\n                            var markerId_2 = markerJS.getId();\r\n                            var markerCluster = _this;\r\n                            overlay = new Marker(markerCluster.getMap(), markerJS);\r\n                            _this.get('_overlays')[markerId_2] = overlay;\r\n                            markerJS.one(markerJS.getId() + '_remove', function () {\r\n                                _this.get('_overlays')[markerId_2] = null;\r\n                            });\r\n                        }\r\n                        args[args.length - 1] = overlay;\r\n                    }\r\n                    else {\r\n                        args[args.length - 1] = _this._objectInstance.getMap().get('_overlays')[args[args.length - 1].getId()];\r\n                    }\r\n                }\r\n                resolve(args);\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Gets a value\r\n     * @param key {any}\r\n     */\r\n    BaseClass.prototype.get = function (key) { return; };\r\n    /**\r\n     * Sets a value\r\n     * @param key {string} The key name for the value. `(key)_changed` will be fired when you set value through this method.\r\n     * @param value {any}\r\n     * @param noNotify {boolean} [options] True if you want to prevent firing the `(key)_changed` event.\r\n     */\r\n    BaseClass.prototype.set = function (key, value, noNotify) { };\r\n    /**\r\n     * Bind a key to another object\r\n     * @param key {string} The property name you want to observe.\r\n     * @param target {any} The target object you want to observe.\r\n     * @param targetKey? {string} [options]  The property name you want to observe. If you omit this, the `key` argument is used.\r\n     * @param noNotify? {boolean} [options] True if you want to prevent `(key)_changed` event when you bind first time, because the internal status is changed from `undefined` to something.\r\n     */\r\n    BaseClass.prototype.bindTo = function (key, target, targetKey, noNotify) { };\r\n    /**\r\n     * Alias of `addEventListener`\r\n     * @param key {string} The property name you want to observe.\r\n     * @return {Observable<any>}\r\n     */\r\n    BaseClass.prototype.on = function (eventName) {\r\n        var _this = this;\r\n        return new Observable(function (observer) {\r\n            _this._objectInstance.on(eventName, function () {\r\n                var args = [];\r\n                for (var _i = 0; _i < arguments.length; _i++) {\r\n                    args[_i] = arguments[_i];\r\n                }\r\n                if (args[args.length - 1] instanceof GoogleMaps.getPlugin().BaseClass) {\r\n                    if (args[args.length - 1].type === 'Map') {\r\n                        args[args.length - 1] = _this;\r\n                    }\r\n                    else if (_this instanceof MarkerCluster) {\r\n                        var overlay = _this.get(args[args.length - 1].getId());\r\n                        if (!overlay) {\r\n                            var markerJS = args[args.length - 1];\r\n                            var markerId_3 = markerJS.getId();\r\n                            var markerCluster = _this;\r\n                            overlay = new Marker(markerCluster.getMap(), markerJS);\r\n                            _this.get('_overlays')[markerId_3] = overlay;\r\n                            markerJS.one(markerJS.getId() + '_remove', function () {\r\n                                _this.get('_overlays')[markerId_3] = null;\r\n                            });\r\n                        }\r\n                        args[args.length - 1] = overlay;\r\n                    }\r\n                    else {\r\n                        args[args.length - 1] = _this._objectInstance.getMap().get('_overlays')[args[args.length - 1].getId()];\r\n                    }\r\n                }\r\n                observer.next(args);\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Alias of `addEventListenerOnce`\r\n     * @param key {string} The property name you want to observe.\r\n     * @return {Promise<any>}\r\n     */\r\n    BaseClass.prototype.one = function (eventName) {\r\n        var _this = this;\r\n        return new Promise(function (resolve) {\r\n            _this._objectInstance.one(eventName, function () {\r\n                var args = [];\r\n                for (var _i = 0; _i < arguments.length; _i++) {\r\n                    args[_i] = arguments[_i];\r\n                }\r\n                if (args[args.length - 1] instanceof GoogleMaps.getPlugin().BaseClass) {\r\n                    if (args[args.length - 1].type === 'Map') {\r\n                        args[args.length - 1] = _this;\r\n                    }\r\n                    else if (_this instanceof MarkerCluster) {\r\n                        var overlay = _this.get(args[args.length - 1].getId());\r\n                        if (!overlay) {\r\n                            var markerJS = args[args.length - 1];\r\n                            var markerId_4 = markerJS.getId();\r\n                            var markerCluster = _this;\r\n                            overlay = new Marker(markerCluster.getMap(), markerJS);\r\n                            _this.get('_overlays')[markerId_4] = overlay;\r\n                            markerJS.one(markerJS.getId() + '_remove', function () {\r\n                                _this.get('_overlays')[markerId_4] = null;\r\n                            });\r\n                        }\r\n                        args[args.length - 1] = overlay;\r\n                    }\r\n                    else {\r\n                        args[args.length - 1] = _this._objectInstance.getMap().get('_overlays')[args[args.length - 1].getId()];\r\n                    }\r\n                }\r\n                resolve(args);\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Clears all stored values\r\n     */\r\n    BaseClass.prototype.empty = function () { };\r\n    /**\r\n     * Dispatch event.\r\n     * @param eventName {string} Event name\r\n     * @param parameters {any} [options] The data you want to pass to event listerners.\r\n     */\r\n    BaseClass.prototype.trigger = function (eventName) {\r\n        var parameters = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            parameters[_i - 1] = arguments[_i];\r\n        }\r\n    };\r\n    /**\r\n     * Executes off() and empty()\r\n     */\r\n    BaseClass.prototype.destroy = function () {\r\n        if (this._objectInstance.type === 'Map') {\r\n            var map = this._objectInstance.getMap();\r\n            if (map) {\r\n                delete this._objectInstance.getMap().get('_overlays')[this._objectInstance.getId()];\r\n            }\r\n        }\r\n        this._objectInstance.remove();\r\n    };\r\n    /**\r\n     * Remove event listener(s)\r\n     * The `removeEventListener()` has three usages:\r\n     *  - removeEventListener(\"eventName\", listenerFunction);\r\n     *     This removes one particular event listener\r\n     *  - removeEventListener(\"eventName\");\r\n     *     This removes the event listeners that added for the event name.\r\n     *  - removeEventListener();\r\n     *     This removes all listeners.\r\n     *\r\n     * @param eventName {string} [options] Event name\r\n     * @param listener {Function} [options] Event listener\r\n     */\r\n    BaseClass.prototype.removeEventListener = function (eventName, listener) { };\r\n    /**\r\n     * Alias of `removeEventListener`\r\n     *\r\n     * @param eventName {string} [options] Event name\r\n     * @param listener {Function} [options] Event listener\r\n     */\r\n    BaseClass.prototype.off = function (eventName, listener) { };\r\n    __decorate([\r\n        InstanceCheck({ observable: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [String]),\r\n        __metadata(\"design:returntype\", Observable)\r\n    ], BaseClass.prototype, \"addEventListener\", null);\r\n    __decorate([\r\n        InstanceCheck(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [String]),\r\n        __metadata(\"design:returntype\", Promise)\r\n    ], BaseClass.prototype, \"addListenerOnce\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [String]),\r\n        __metadata(\"design:returntype\", Object)\r\n    ], BaseClass.prototype, \"get\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [String, Object, Boolean]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], BaseClass.prototype, \"set\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [String, Object, String, Boolean]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], BaseClass.prototype, \"bindTo\", null);\r\n    __decorate([\r\n        InstanceCheck({ observable: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [String]),\r\n        __metadata(\"design:returntype\", Observable)\r\n    ], BaseClass.prototype, \"on\", null);\r\n    __decorate([\r\n        InstanceCheck(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [String]),\r\n        __metadata(\"design:returntype\", Promise)\r\n    ], BaseClass.prototype, \"one\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], BaseClass.prototype, \"empty\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [String, Object]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], BaseClass.prototype, \"trigger\", null);\r\n    __decorate([\r\n        CordovaCheck({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], BaseClass.prototype, \"destroy\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [String, Function]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], BaseClass.prototype, \"removeEventListener\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [String, Function]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], BaseClass.prototype, \"off\", null);\r\n    BaseClass = __decorate([\r\n        Plugin({\r\n            plugin: 'cordova-plugin-googlemaps',\r\n            pluginName: 'GoogleMaps',\r\n            pluginRef: 'plugin.google.maps.BaseClass',\r\n            repo: ''\r\n        })\r\n    ], BaseClass);\r\n    return BaseClass;\r\n}());\r\nexport { BaseClass };\r\n/**\r\n * @hidden\r\n * https://github.com/mapsplugin/cordova-plugin-googlemaps-doc/blob/master/v2.0.0/class/BaseArrayClass/README.md\r\n */\r\nvar BaseArrayClass = (function (_super) {\r\n    __extends(BaseArrayClass, _super);\r\n    function BaseArrayClass(initialData) {\r\n        var _this = _super.call(this) || this;\r\n        if (initialData instanceof GoogleMaps.getPlugin().BaseArrayClass) {\r\n            _this._objectInstance = initialData;\r\n        }\r\n        else {\r\n            _this._objectInstance = new (GoogleMaps.getPlugin().BaseArrayClass)(initialData);\r\n        }\r\n        return _this;\r\n    }\r\n    /**\r\n     * Removes all elements from the array.\r\n     * @param noNotify? {boolean} [options] Set true to prevent remove_at events.\r\n     */\r\n    BaseArrayClass.prototype.empty = function (noNotify) { };\r\n    /**\r\n     * Iterate over each element, calling the provided callback.\r\n     * @param fn {Function}\r\n     */\r\n    BaseArrayClass.prototype.forEach = function (fn) { };\r\n    /**\r\n     * Iterate over each element, calling the provided callback.\r\n     * @param fn {Function}\r\n     * @return {Promise<void>}\r\n     */\r\n    BaseArrayClass.prototype.forEachAsync = function (fn) {\r\n        var _this = this;\r\n        return new Promise(function (resolve) {\r\n            _this._objectInstance.forEachAsync(fn, resolve);\r\n        });\r\n    };\r\n    /**\r\n     * Iterate over each element, then Returns a new value.\r\n     * Then you can get the results of each callback.\r\n     * @param fn {Function}\r\n     * @return {Array<Object>} returns a new array with the results\r\n     */\r\n    BaseArrayClass.prototype.map = function (fn) { return; };\r\n    /**\r\n     * Iterate over each element, calling the provided callback.\r\n     * Then you can get the results of each callback.\r\n     * @param fn {Function}\r\n     * @param callback {Function}\r\n     * @return {Promise<any>} returns a new array with the results\r\n     */\r\n    BaseArrayClass.prototype.mapAsync = function (fn) {\r\n        var _this = this;\r\n        return new Promise(function (resolve) {\r\n            _this._objectInstance.mapAsync(fn, resolve);\r\n        });\r\n    };\r\n    /**\r\n     * Same as `mapAsync`, but keep the execution order\r\n     * @param fn {Function}\r\n     * @param callback {Function}\r\n     * @return {Promise<any>} returns a new array with the results\r\n     */\r\n    BaseArrayClass.prototype.mapSeries = function (fn) {\r\n        var _this = this;\r\n        return new Promise(function (resolve) {\r\n            _this._objectInstance.mapSeries(fn, resolve);\r\n        });\r\n    };\r\n    /**\r\n     * The filter() method creates a new array with all elements that pass the test implemented by the provided function.\r\n     * @param fn {Function}\r\n     * @return {T[]} returns a new filtered array\r\n     */\r\n    BaseArrayClass.prototype.filter = function (fn) { return; };\r\n    /**\r\n     * The filterAsync() method creates a new array with all elements that pass the test implemented by the provided function.\r\n     * @param fn {Function}\r\n     * @param callback {Function}\r\n     * @return {Promise<T[]>} returns a new filtered array\r\n     */\r\n    BaseArrayClass.prototype.filterAsync = function (fn) {\r\n        var _this = this;\r\n        return new Promise(function (resolve) {\r\n            _this._objectInstance.filterAsync(fn, resolve);\r\n        });\r\n    };\r\n    /**\r\n     * Returns a reference to the underlying Array.\r\n     * @return {Array<Object>}\r\n     */\r\n    BaseArrayClass.prototype.getArray = function () { return; };\r\n    /**\r\n     * Returns the element at the specified index.\r\n     * @param index {number}\r\n     * @return {Object}\r\n     */\r\n    BaseArrayClass.prototype.getAt = function (index) { };\r\n    /**\r\n     * Returns the number of the elements.\r\n     * @return {number}\r\n     */\r\n    BaseArrayClass.prototype.getLength = function () { return; };\r\n    /**\r\n     * The indexOf() method returns the first index at which a given element can be found in the array, or -1 if it is not present.\r\n     * @param element {Object}\r\n     * @return {number}\r\n     */\r\n    BaseArrayClass.prototype.indexOf = function (element) { return; };\r\n    /**\r\n     * The reverse() method reverses an array in place.\r\n     */\r\n    BaseArrayClass.prototype.reverse = function () { };\r\n    /**\r\n     * The sort() method sorts the elements of an array in place and returns the array.\r\n     */\r\n    BaseArrayClass.prototype.sort = function () { };\r\n    /**\r\n     * Inserts an element at the specified index.\r\n     * @param index {number}\r\n     * @param element {Object}\r\n     * @param noNotify? {boolean} [options] Set true to prevent insert_at event.\r\n     * @return {Object}\r\n     */\r\n    BaseArrayClass.prototype.insertAt = function (index, element, noNotify) { };\r\n    /**\r\n     * Removes the last element of the array and returns that element.\r\n     * @param noNotify? {boolean} [options] Set true to prevent remove_at event.\r\n     * @return {Object}\r\n     */\r\n    BaseArrayClass.prototype.pop = function (noNotify) { return; };\r\n    /**\r\n     * Adds one element to the end of the array and returns the new length of the array.\r\n     * @param element {object}\r\n     * @param noNotify? {boolean} Set true to prevent insert_at events.\r\n     */\r\n    BaseArrayClass.prototype.push = function (element, noNotify) { };\r\n    /**\r\n     * Removes an element from the specified index.\r\n     * @param index {number}\r\n     * @param noNotify? {boolean} [options] Set true to prevent remove_at event.\r\n     */\r\n    BaseArrayClass.prototype.removeAt = function (index, noNotify) { return; };\r\n    /**\r\n     * Sets an element at the specified index.\r\n     * @param index {number}\r\n     * @param element {object}\r\n     * @param noNotify? {boolean} [options] Set true to prevent set_at event.\r\n     */\r\n    BaseArrayClass.prototype.setAt = function (index, element, noNotify) { };\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Boolean]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], BaseArrayClass.prototype, \"empty\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Function]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], BaseArrayClass.prototype, \"forEach\", null);\r\n    __decorate([\r\n        CordovaCheck(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Function]),\r\n        __metadata(\"design:returntype\", Promise)\r\n    ], BaseArrayClass.prototype, \"forEachAsync\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Function]),\r\n        __metadata(\"design:returntype\", Array)\r\n    ], BaseArrayClass.prototype, \"map\", null);\r\n    __decorate([\r\n        CordovaCheck(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Function]),\r\n        __metadata(\"design:returntype\", Promise)\r\n    ], BaseArrayClass.prototype, \"mapAsync\", null);\r\n    __decorate([\r\n        CordovaCheck(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Function]),\r\n        __metadata(\"design:returntype\", Promise)\r\n    ], BaseArrayClass.prototype, \"mapSeries\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Function]),\r\n        __metadata(\"design:returntype\", Array)\r\n    ], BaseArrayClass.prototype, \"filter\", null);\r\n    __decorate([\r\n        CordovaCheck(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Function]),\r\n        __metadata(\"design:returntype\", Promise)\r\n    ], BaseArrayClass.prototype, \"filterAsync\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", Array)\r\n    ], BaseArrayClass.prototype, \"getArray\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Number]),\r\n        __metadata(\"design:returntype\", Object)\r\n    ], BaseArrayClass.prototype, \"getAt\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", Number)\r\n    ], BaseArrayClass.prototype, \"getLength\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Object]),\r\n        __metadata(\"design:returntype\", Number)\r\n    ], BaseArrayClass.prototype, \"indexOf\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], BaseArrayClass.prototype, \"reverse\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], BaseArrayClass.prototype, \"sort\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Number, Object, Boolean]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], BaseArrayClass.prototype, \"insertAt\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Boolean]),\r\n        __metadata(\"design:returntype\", Object)\r\n    ], BaseArrayClass.prototype, \"pop\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Object, Boolean]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], BaseArrayClass.prototype, \"push\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Number, Boolean]),\r\n        __metadata(\"design:returntype\", Object)\r\n    ], BaseArrayClass.prototype, \"removeAt\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Number, Object, Boolean]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], BaseArrayClass.prototype, \"setAt\", null);\r\n    BaseArrayClass = __decorate([\r\n        Plugin({\r\n            plugin: 'cordova-plugin-googlemaps',\r\n            pluginName: 'GoogleMaps',\r\n            pluginRef: 'plugin.google.maps.BaseArrayClass',\r\n            repo: ''\r\n        }),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], BaseArrayClass);\r\n    return BaseArrayClass;\r\n}(BaseClass));\r\nexport { BaseArrayClass };\r\n/**\r\n * @hidden\r\n * https://github.com/mapsplugin/cordova-plugin-googlemaps-doc/blob/master/v2.0.0/class/Circle/README.md\r\n */\r\nvar Circle = (function (_super) {\r\n    __extends(Circle, _super);\r\n    function Circle(_map, _objectInstance) {\r\n        var _this = _super.call(this) || this;\r\n        _this._map = _map;\r\n        _this._objectInstance = _objectInstance;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Returns the ID of instance.\r\n     * @return {string}\r\n     */\r\n    Circle.prototype.getId = function () { return; };\r\n    /**\r\n     * Returns the map instance.\r\n     * @return {GoogleMap}\r\n     */\r\n    Circle.prototype.getMap = function () { return this._map; };\r\n    /**\r\n     * Changes the center position.\r\n     * @param latLng {ILatLng}\r\n     */\r\n    Circle.prototype.setCenter = function (latLng) { };\r\n    /**\r\n     * Returns the current center position\r\n     * @return {ILatLng}\r\n     */\r\n    Circle.prototype.getCenter = function () { return; };\r\n    /**\r\n     * Returns the current circle radius.\r\n     * @return {number}\r\n     */\r\n    Circle.prototype.getRadius = function () { return; };\r\n    /**\r\n     * Changes the circle radius.\r\n     * @param radius {number}\r\n     */\r\n    Circle.prototype.setRadius = function (radius) { };\r\n    /**\r\n     * Changes the filling color (inner color).\r\n     * @param color {string}\r\n     */\r\n    Circle.prototype.setFillColor = function (color) { };\r\n    /**\r\n     * Returns the current circle filling color (inner color).\r\n     * @return {string}\r\n     */\r\n    Circle.prototype.getFillColor = function () { return; };\r\n    /**\r\n     * Changes the stroke width.\r\n     * @param strokeWidth {number}\r\n     */\r\n    Circle.prototype.setStrokeWidth = function (strokeWidth) { };\r\n    /**\r\n     * Returns the current circle stroke width (unit: pixel).\r\n     * @return {number}\r\n     */\r\n    Circle.prototype.getStrokeWidth = function () { return; };\r\n    /**\r\n     * Changes the stroke color (outter color).\r\n     * @param strokeColor {string}\r\n     */\r\n    Circle.prototype.setStrokeColor = function (strokeColor) { };\r\n    /**\r\n     * Returns the current circle stroke color (outer color).\r\n     * @return {string}\r\n     */\r\n    Circle.prototype.getStrokeColor = function () { return; };\r\n    /**\r\n     * Changes click-ability of the circle.\r\n     * @param clickable {boolean}\r\n     */\r\n    Circle.prototype.setClickable = function (clickable) { };\r\n    /**\r\n     * Returns true if the circle is clickable.\r\n     * @return {boolean}\r\n     */\r\n    Circle.prototype.getClickable = function () { return; };\r\n    /**\r\n     * Changes the circle zIndex order.\r\n     * @param zIndex {number}\r\n     */\r\n    Circle.prototype.setZIndex = function (zIndex) { };\r\n    /**\r\n     * Returns the current circle zIndex.\r\n     * @return {number}\r\n     */\r\n    Circle.prototype.getZIndex = function () { return; };\r\n    /**\r\n     * Remove the circle.\r\n     */\r\n    Circle.prototype.remove = function () { };\r\n    /**\r\n     * Returns the latLngBounds (rectangle) that contains the circle.\r\n     * @return {LatLngBounds}\r\n     */\r\n    Circle.prototype.getBounds = function () { return; };\r\n    /**\r\n     * Set circle visibility\r\n     * @param visible {boolean}\r\n     */\r\n    Circle.prototype.setVisible = function (visible) { };\r\n    /**\r\n     * Returns true if the circle is visible.\r\n     * @return {boolean}\r\n     */\r\n    Circle.prototype.getVisible = function () { return; };\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", String)\r\n    ], Circle.prototype, \"getId\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Object]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], Circle.prototype, \"setCenter\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", Object)\r\n    ], Circle.prototype, \"getCenter\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", Number)\r\n    ], Circle.prototype, \"getRadius\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Number]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], Circle.prototype, \"setRadius\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [String]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], Circle.prototype, \"setFillColor\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", String)\r\n    ], Circle.prototype, \"getFillColor\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Number]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], Circle.prototype, \"setStrokeWidth\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", Number)\r\n    ], Circle.prototype, \"getStrokeWidth\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [String]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], Circle.prototype, \"setStrokeColor\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", String)\r\n    ], Circle.prototype, \"getStrokeColor\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Boolean]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], Circle.prototype, \"setClickable\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", Boolean)\r\n    ], Circle.prototype, \"getClickable\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Number]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], Circle.prototype, \"setZIndex\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", Number)\r\n    ], Circle.prototype, \"getZIndex\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], Circle.prototype, \"remove\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", LatLngBounds)\r\n    ], Circle.prototype, \"getBounds\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Boolean]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], Circle.prototype, \"setVisible\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", Boolean)\r\n    ], Circle.prototype, \"getVisible\", null);\r\n    return Circle;\r\n}(BaseClass));\r\nexport { Circle };\r\n/**\r\n * @hidden\r\n */\r\nvar Environment = (function () {\r\n    function Environment() {\r\n    }\r\n    Environment_1 = Environment;\r\n    /**\r\n     * Get the open source software license information for Google Maps SDK for iOS.\r\n     * @return {Promise<any>}\r\n     */\r\n    Environment.getLicenseInfo = function () {\r\n        return new Promise(function (resolve) {\r\n            GoogleMaps.getPlugin().environment.getLicenseInfo(function (text) { return resolve(text); });\r\n        });\r\n    };\r\n    /**\r\n     * @deprecation\r\n     * @hidden\r\n     */\r\n    Environment.prototype.getLicenseInfo = function () {\r\n        console.error('GoogleMaps', '[deprecated] This method is static. Please use Environment.getLicenseInfo()');\r\n        return Environment_1.getLicenseInfo();\r\n    };\r\n    /**\r\n     * Specifies the background color of the app.\r\n     * @param color\r\n     */\r\n    Environment.setBackgroundColor = function (color) {\r\n        GoogleMaps.getPlugin().environment.setBackgroundColor(color);\r\n    };\r\n    /**\r\n     * @deprecation\r\n     * @hidden\r\n     */\r\n    Environment.prototype.setBackgroundColor = function (color) {\r\n        console.error('GoogleMaps', '[deprecated] This method is static. Please use Environment.setBackgroundColor()');\r\n        Environment_1.setBackgroundColor(color);\r\n    };\r\n    Environment = Environment_1 = __decorate([\r\n        Plugin({\r\n            plugin: 'cordova-plugin-googlemaps',\r\n            pluginName: 'GoogleMaps',\r\n            pluginRef: 'plugin.google.maps.environment',\r\n            repo: ''\r\n        })\r\n    ], Environment);\r\n    return Environment;\r\n    var Environment_1;\r\n}());\r\nexport { Environment };\r\n/**\r\n * @hidden\r\n */\r\nvar Geocoder = (function () {\r\n    function Geocoder() {\r\n    }\r\n    Geocoder_1 = Geocoder;\r\n    /**\r\n     * @deprecation\r\n     * @hidden\r\n     */\r\n    Geocoder.prototype.geocode = function (request) {\r\n        console.error('GoogleMaps', '[deprecated] This method is static. Please use Geocoder.geocode()');\r\n        return Geocoder_1.geocode(request);\r\n    };\r\n    /**\r\n     * Converts position to address and vice versa\r\n     * @param {GeocoderRequest} request Request object with either an address or a position\r\n     * @return {Promise<GeocoderResult[] | BaseArrayClass<GeocoderResult>>}\r\n     */\r\n    Geocoder.geocode = function (request) {\r\n        if (request.address instanceof Array || Array.isArray(request.address) ||\r\n            request.position instanceof Array || Array.isArray(request.position)) {\r\n            // -------------------------\r\n            // Geocoder.geocode({\r\n            //   address: [\r\n            //    \"Kyoto, Japan\",\r\n            //    \"Tokyo, Japan\"\r\n            //   ]\r\n            // })\r\n            // -------------------------\r\n            return new Promise(function (resolve, reject) {\r\n                GoogleMaps.getPlugin().Geocoder.geocode(request, function (mvcArray) {\r\n                    if (mvcArray) {\r\n                        resolve(new BaseArrayClass(mvcArray));\r\n                    }\r\n                    else {\r\n                        reject();\r\n                    }\r\n                });\r\n            });\r\n        }\r\n        else {\r\n            // -------------------------\r\n            // Geocoder.geocode({\r\n            //   address: \"Kyoto, Japan\"\r\n            // })\r\n            // -------------------------\r\n            return new Promise(function (resolve, reject) {\r\n                GoogleMaps.getPlugin().Geocoder.geocode(request, function (results) {\r\n                    if (results) {\r\n                        resolve(results);\r\n                    }\r\n                    else {\r\n                        reject();\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    };\r\n    Geocoder = Geocoder_1 = __decorate([\r\n        Plugin({\r\n            pluginName: 'GoogleMaps',\r\n            pluginRef: 'plugin.google.maps.Geocoder',\r\n            plugin: 'cordova-plugin-googlemaps',\r\n            repo: ''\r\n        })\r\n    ], Geocoder);\r\n    return Geocoder;\r\n    var Geocoder_1;\r\n}());\r\nexport { Geocoder };\r\n/**\r\n * @hidden\r\n */\r\nvar LocationService = (function () {\r\n    function LocationService() {\r\n    }\r\n    /**\r\n     * Get the current device location without map\r\n     * @return {Promise<MyLocation>}\r\n     */\r\n    LocationService.getMyLocation = function (options) {\r\n        return new Promise(function (resolve, reject) {\r\n            GoogleMaps.getPlugin().LocationService.getMyLocation(options, resolve);\r\n        });\r\n    };\r\n    LocationService = __decorate([\r\n        Plugin({\r\n            pluginName: 'GoogleMaps',\r\n            pluginRef: 'plugin.google.maps.LocationService',\r\n            plugin: 'cordova-plugin-googlemaps',\r\n            repo: ''\r\n        })\r\n    ], LocationService);\r\n    return LocationService;\r\n}());\r\nexport { LocationService };\r\n/**\r\n * @hidden\r\n */\r\nvar Encoding = (function () {\r\n    function Encoding() {\r\n    }\r\n    Encoding_1 = Encoding;\r\n    /**\r\n     * @deprecation\r\n     * @hidden\r\n     */\r\n    Encoding.prototype.decodePath = function (encoded, precision) {\r\n        console.error('GoogleMaps', '[deprecated] This method is static. Please use Encoding.decodePath()');\r\n        return Encoding_1.decodePath(encoded, precision);\r\n    };\r\n    /**\r\n     * @deprecation\r\n     * @hidden\r\n     */\r\n    Encoding.prototype.encodePath = function (path) {\r\n        console.error('GoogleMaps', '[deprecated] This method is static. Please use Encoding.encodePath()');\r\n        return Encoding_1.encodePath(path);\r\n    };\r\n    /**\r\n     * Decodes an encoded path string into a sequence of LatLngs.\r\n     * @param encoded {string} an encoded path string\r\n     * @param precision? {number} default: 5\r\n     * @return {ILatLng[]}\r\n     */\r\n    Encoding.decodePath = function (encoded, precision) {\r\n        return GoogleMaps.getPlugin().geometry.encoding.decodePath(encoded, precision);\r\n    };\r\n    /**\r\n     * Encodes a sequence of LatLngs into an encoded path string.\r\n     * @param path {Array<ILatLng> | BaseArrayClass<ILatLng>} a sequence of LatLngs\r\n     * @return {string}\r\n     */\r\n    Encoding.encodePath = function (path) {\r\n        return GoogleMaps.getPlugin().geometry.encoding.encodePath(path);\r\n    };\r\n    Encoding = Encoding_1 = __decorate([\r\n        Plugin({\r\n            pluginName: 'GoogleMaps',\r\n            pluginRef: 'plugin.google.maps.geometry.encoding',\r\n            plugin: 'cordova-plugin-googlemaps',\r\n            repo: ''\r\n        })\r\n    ], Encoding);\r\n    return Encoding;\r\n    var Encoding_1;\r\n}());\r\nexport { Encoding };\r\n/**\r\n * @hidden\r\n */\r\nvar Poly = (function () {\r\n    function Poly() {\r\n    }\r\n    /**\r\n     * Returns true if the specified location is in the polygon path\r\n     * @param location {ILatLng}\r\n     * @param path {ILatLng[]}\r\n     * @return {boolean}\r\n     */\r\n    Poly.containsLocation = function (location, path) {\r\n        return GoogleMaps.getPlugin().geometry.poly.containsLocation(location, path);\r\n    };\r\n    /**\r\n     * Returns true if the specified location is on the polyline path\r\n     * @param location {ILatLng}\r\n     * @param path {ILatLng[]}\r\n     * @return {boolean}\r\n     */\r\n    Poly.isLocationOnEdge = function (location, path) {\r\n        return GoogleMaps.getPlugin().geometry.poly.isLocationOnEdge(location, path);\r\n    };\r\n    Poly = __decorate([\r\n        Plugin({\r\n            pluginName: 'GoogleMaps',\r\n            pluginRef: 'plugin.google.maps.geometry.poly',\r\n            plugin: 'cordova-plugin-googlemaps',\r\n            repo: ''\r\n        })\r\n    ], Poly);\r\n    return Poly;\r\n}());\r\nexport { Poly };\r\n/**\r\n * @hidden\r\n */\r\nvar Spherical = (function () {\r\n    function Spherical() {\r\n    }\r\n    Spherical_1 = Spherical;\r\n    /**\r\n     * @deprecation\r\n     * @hidden\r\n     */\r\n    Spherical.prototype.computeDistanceBetween = function (from, to) {\r\n        console.error('GoogleMaps', '[deprecated] This method is static. Please use Spherical.computeDistanceBetween()');\r\n        return Spherical_1.computeDistanceBetween(from, to);\r\n    };\r\n    /**\r\n     * @deprecation\r\n     * @hidden\r\n     */\r\n    Spherical.prototype.computeOffset = function (from, distance, heading) {\r\n        console.error('GoogleMaps', '[deprecated] This method is static. Please use Spherical.computeOffset()');\r\n        return Spherical_1.computeOffset(from, distance, heading);\r\n    };\r\n    /**\r\n     * @deprecation\r\n     * @hidden\r\n     */\r\n    Spherical.prototype.computeOffsetOrigin = function (to, distance, heading) {\r\n        console.error('GoogleMaps', '[deprecated] This method is static. Please use Spherical.computeOffsetOrigin()');\r\n        return Spherical_1.computeOffsetOrigin(to, distance, heading);\r\n    };\r\n    /**\r\n     * @deprecation\r\n     * @hidden\r\n     */\r\n    Spherical.prototype.computeLength = function (path) {\r\n        console.error('GoogleMaps', '[deprecated] This method is static. Please use Spherical.computeLength()');\r\n        return Spherical_1.computeLength(path);\r\n    };\r\n    /**\r\n     * @deprecation\r\n     * @hidden\r\n     */\r\n    Spherical.prototype.computeArea = function (path) {\r\n        console.error('GoogleMaps', '[deprecated] This method is static. Please use Spherical.computeArea()');\r\n        return Spherical_1.computeArea(path);\r\n    };\r\n    /**\r\n     * @deprecation\r\n     * @hidden\r\n     */\r\n    Spherical.prototype.computeSignedArea = function (path) {\r\n        console.error('GoogleMaps', '[deprecated] This method is static. Please use Spherical.computeSignedArea()');\r\n        return Spherical_1.computeSignedArea(path);\r\n    };\r\n    /**\r\n     * @deprecation\r\n     * @hidden\r\n     */\r\n    Spherical.prototype.computeHeading = function (from, to) {\r\n        console.error('GoogleMaps', '[deprecated] This method is static. Please use Spherical.computeHeading()');\r\n        return Spherical_1.computeHeading(from, to);\r\n    };\r\n    /**\r\n     * @deprecation\r\n     * @hidden\r\n     */\r\n    Spherical.prototype.interpolate = function (from, to, fraction) {\r\n        console.error('GoogleMaps', '[deprecated] This method is static. Please use Spherical.interpolate()');\r\n        return Spherical_1.interpolate(from, to, fraction);\r\n    };\r\n    /**\r\n     * Returns the distance, in meters, between two LatLngs.\r\n     * @param locationA {ILatLng}\r\n     * @param locationB {ILatLng}\r\n     * @return {number}\r\n     */\r\n    Spherical.computeDistanceBetween = function (from, to) {\r\n        return GoogleMaps.getPlugin().geometry.spherical.computeDistanceBetween(from, to);\r\n    };\r\n    /**\r\n     * Returns the LatLng resulting from moving a distance from an origin in the specified heading (expressed in degrees clockwise from north)\r\n     * @param from {ILatLng}\r\n     * @param distance {number}\r\n     * @param heading {number}\r\n     * @return {LatLng}\r\n     */\r\n    Spherical.computeOffset = function (from, distance, heading) {\r\n        return GoogleMaps.getPlugin().geometry.spherical.computeOffset(from, distance, heading);\r\n    };\r\n    /**\r\n     * Returns the location of origin when provided with a LatLng destination, meters travelled and original heading. Headings are expressed in degrees clockwise from North. This function returns null when no solution is available.\r\n     * @param to {ILatLng} The destination LatLng.\r\n     * @param distance {number} The distance travelled, in meters.\r\n     * @param heading {number} The heading in degrees clockwise from north.\r\n     * @return {LatLng}\r\n     */\r\n    Spherical.computeOffsetOrigin = function (to, distance, heading) {\r\n        return GoogleMaps.getPlugin().geometry.spherical.computeOffsetOrigin(to, distance, heading);\r\n    };\r\n    /**\r\n     * Returns the length of the given path.\r\n     * @param path {Array<ILatLng> | BaseArrayClass<ILatLng>}\r\n     * @return {number}\r\n     */\r\n    Spherical.computeLength = function (path) {\r\n        return GoogleMaps.getPlugin().geometry.spherical.computeLength(path);\r\n    };\r\n    /**\r\n     * Returns the area of a closed path. The computed area uses the same units as the radius.\r\n     * @param path {Array<ILatLng> | BaseArrayClass<ILatLng>}.\r\n     * @return {number}\r\n     */\r\n    Spherical.computeArea = function (path) {\r\n        return GoogleMaps.getPlugin().geometry.spherical.computeArea(path);\r\n    };\r\n    /**\r\n     * Returns the signed area of a closed path. The signed area may be used to determine the orientation of the path.\r\n     * @param path {Array<ILatLng> | BaseArrayClass<ILatLng>}.\r\n     * @return {number}\r\n     */\r\n    Spherical.computeSignedArea = function (path) {\r\n        return GoogleMaps.getPlugin().geometry.spherical.computeSignedArea(path);\r\n    };\r\n    /**\r\n     * Returns the heading from one LatLng to another LatLng. Headings are expressed in degrees clockwise from North within the range (-180,180).\r\n     * @param from {ILatLng}\r\n     * @param to {ILatLng}\r\n     * @return {number}\r\n     */\r\n    Spherical.computeHeading = function (from, to) {\r\n        return GoogleMaps.getPlugin().geometry.spherical.computeHeading(from, to);\r\n    };\r\n    /**\r\n     * Returns the LatLng which lies the given fraction of the way between the origin LatLng and the destination LatLng.\r\n     * @param from {ILatLng}     The LatLng from which to start.\r\n     * @param to {ILatLng}       The LatLng toward which to travel.\r\n     * @param fraction {number}  A fraction of the distance to travel from 0.0 to 1.0 .\r\n     * @return {LatLng}\r\n     */\r\n    Spherical.interpolate = function (from, to, fraction) {\r\n        return GoogleMaps.getPlugin().geometry.spherical.interpolate(from, to, fraction);\r\n    };\r\n    Spherical = Spherical_1 = __decorate([\r\n        Plugin({\r\n            pluginName: 'GoogleMaps',\r\n            pluginRef: 'plugin.google.maps.geometry.spherical',\r\n            plugin: 'cordova-plugin-googlemaps',\r\n            repo: ''\r\n        })\r\n    ], Spherical);\r\n    return Spherical;\r\n    var Spherical_1;\r\n}());\r\nexport { Spherical };\r\n/**\r\n * @hidden\r\n */\r\nvar GoogleMap = (function (_super) {\r\n    __extends(GoogleMap, _super);\r\n    function GoogleMap(element, options) {\r\n        var _this = _super.call(this) || this;\r\n        if (checkAvailability(GoogleMaps.getPluginRef(), null, GoogleMaps.getPluginName()) === true) {\r\n            if (element instanceof HTMLElement) {\r\n                _this._objectInstance = GoogleMaps.getPlugin().Map.getMap(element, options);\r\n            }\r\n            else if (typeof element === 'string') {\r\n                var dummyObj_1 = new (GoogleMaps.getPlugin().BaseClass)();\r\n                _this._objectInstance = dummyObj_1;\r\n                var onListeners_1 = [];\r\n                var oneListeners_1 = [];\r\n                var _origAddEventListener_1 = _this._objectInstance.addEventListener;\r\n                var _origAddEventListenerOnce_1 = _this._objectInstance.addEventListenerOnce;\r\n                _this._objectInstance.addEventListener = function (eventName, fn) {\r\n                    if (eventName === GoogleMapsEvent.MAP_READY) {\r\n                        _origAddEventListener_1.call(dummyObj_1, eventName, fn);\r\n                    }\r\n                    else {\r\n                        onListeners_1.push([dummyObj_1, fn]);\r\n                    }\r\n                };\r\n                _this._objectInstance.on = _this._objectInstance.addEventListener;\r\n                _this._objectInstance.addEventListenerOnce = function (eventName, fn) {\r\n                    if (eventName === GoogleMapsEvent.MAP_READY) {\r\n                        _origAddEventListenerOnce_1.call(dummyObj_1, eventName, fn);\r\n                    }\r\n                    else {\r\n                        oneListeners_1.push([dummyObj_1, fn]);\r\n                    }\r\n                };\r\n                _this._objectInstance.one = _this._objectInstance.addEventListenerOnce;\r\n                (new Promise(function (resolve, reject) {\r\n                    var count = 0;\r\n                    var timer = setInterval(function () {\r\n                        var target = document.querySelector('.show-page #' + element);\r\n                        if (target) {\r\n                            clearInterval(timer);\r\n                            resolve(target);\r\n                        }\r\n                        else {\r\n                            if (count++ < 20) {\r\n                                return;\r\n                            }\r\n                            clearInterval(timer);\r\n                            _this._objectInstance.remove();\r\n                            console.error('Can not find the element [#' + element + ']');\r\n                            reject();\r\n                        }\r\n                    }, 100);\r\n                }))\r\n                    .then(function (target) {\r\n                    _this._objectInstance = GoogleMaps.getPlugin().Map.getMap(target, options);\r\n                    _this._objectInstance.one(GoogleMapsEvent.MAP_READY, function () {\r\n                        _this.set('_overlays', {});\r\n                        onListeners_1.forEach(function (args) {\r\n                            _this.on.apply(_this, args);\r\n                        });\r\n                        oneListeners_1.forEach(function (args) {\r\n                            _this.one.apply(_this, args);\r\n                        });\r\n                        dummyObj_1.trigger(GoogleMapsEvent.MAP_READY);\r\n                    });\r\n                })\r\n                    .catch(function () {\r\n                    _this._objectInstance = null;\r\n                });\r\n            }\r\n            else if (element === null && options) {\r\n                _this._objectInstance = GoogleMaps.getPlugin().Map.getMap(null, options);\r\n            }\r\n        }\r\n        return _this;\r\n    }\r\n    /**\r\n     * Changes the map div\r\n     * @param domNode {HTMLElement | string} [options] If you want to display the map in an html element, you need to specify an element or id. If omit this argument, the map is detached from webview.\r\n     */\r\n    GoogleMap.prototype.setDiv = function (domNode) {\r\n        if (typeof domNode === 'string') {\r\n            this._objectInstance.setDiv(document.querySelector('.show-page #' + domNode));\r\n        }\r\n        else {\r\n            this._objectInstance.setDiv(domNode);\r\n        }\r\n    };\r\n    /**\r\n     * Returns the map HTML element\r\n     * @return {HTMLElement}\r\n     */\r\n    GoogleMap.prototype.getDiv = function () { return; };\r\n    /**\r\n     * Changes the map type id\r\n     * @param mapTypeId {string}\r\n     */\r\n    GoogleMap.prototype.setMapTypeId = function (mapTypeId) { };\r\n    /**\r\n     * Moves the camera with animation\r\n     * @return {Promise<any>}\r\n     */\r\n    GoogleMap.prototype.animateCamera = function (cameraPosition) { return; };\r\n    /**\r\n     * Zooming in the camera with animation\r\n     * @return {Promise<any>}\r\n     */\r\n    GoogleMap.prototype.animateCameraZoomIn = function () { return; };\r\n    /**\r\n     * Zooming out the camera with animation\r\n     * @return {Promise<any>}\r\n     */\r\n    GoogleMap.prototype.animateCameraZoomOut = function () { return; };\r\n    /**\r\n     * Moves the camera without animation\r\n     * @return {Promise<any>}\r\n     */\r\n    GoogleMap.prototype.moveCamera = function (cameraPosition) { return; };\r\n    /**\r\n     * Zooming in the camera without animation\r\n     * @return {Promise<any>}\r\n     */\r\n    GoogleMap.prototype.moveCameraZoomIn = function () { return; };\r\n    /**\r\n     * Zooming out the camera without animation\r\n     * @return {Promise<any>}\r\n     */\r\n    GoogleMap.prototype.moveCameraZoomOut = function () { return; };\r\n    /**\r\n     * Get the position of the camera.\r\n     * @return {CameraPosition}\r\n     */\r\n    GoogleMap.prototype.getCameraPosition = function () { return; };\r\n    /**\r\n     * Get the current camera target position\r\n     * @return {ILatLng}\r\n     */\r\n    GoogleMap.prototype.getCameraTarget = function () { return; };\r\n    /**\r\n     * Get the current camera zoom level\r\n     * @return {number}\r\n     */\r\n    GoogleMap.prototype.getCameraZoom = function () { return; };\r\n    /**\r\n     * Get the current camera bearing\r\n     * @return {number}\r\n     */\r\n    GoogleMap.prototype.getCameraBearing = function () { return; };\r\n    /**\r\n     * Get the current camera tilt (view angle)\r\n     * @return {number}\r\n     */\r\n    GoogleMap.prototype.getCameraTilt = function () { return; };\r\n    /**\r\n     * Set the center position of the camera view\r\n     * @param latLng {ILatLng | Array<ILatLng>}\r\n     */\r\n    GoogleMap.prototype.setCameraTarget = function (latLng) { };\r\n    /**\r\n     * Set zoom level of the camera\r\n     * @param zoomLevel {number} Zoom level\r\n     */\r\n    GoogleMap.prototype.setCameraZoom = function (zoomLevel) { };\r\n    /**\r\n     * Set the camera view angle\r\n     * @param tiltAngle {number} Tilt angle\r\n     */\r\n    GoogleMap.prototype.setCameraTilt = function (tiltAngle) { };\r\n    /**\r\n     * Set camera bearing\r\n     * @param bearing {any}\r\n     */\r\n    GoogleMap.prototype.setCameraBearing = function (bearing) { };\r\n    /**\r\n     * Changes the center of the map by the given distance in pixels\r\n     * @param x {number}\r\n     * @param y {number}\r\n     */\r\n    GoogleMap.prototype.panBy = function (x, y) { };\r\n    /**\r\n     * Get the current visible region (southWest and northEast)\r\n     * @return {VisibleRegion}\r\n     */\r\n    GoogleMap.prototype.getVisibleRegion = function () { return; };\r\n    /**\r\n     * Get the current device location\r\n     * @return {Promise<MyLocation>}\r\n     */\r\n    GoogleMap.prototype.getMyLocation = function (options) { return; };\r\n    /**\r\n     * Set false to ignore all clicks on the map\r\n     * @param isClickable {boolean}\r\n     */\r\n    GoogleMap.prototype.setClickable = function (isClickable) { };\r\n    /**\r\n     * Destroy a map completely\r\n     * @return {Promise<any>}\r\n     */\r\n    GoogleMap.prototype.remove = function () {\r\n        var _this = this;\r\n        if (this.get('_overlays')) {\r\n            Object.keys(this.get('_overlays')).forEach(function (overlayId) {\r\n                _this.get('_overlays')[overlayId] = null;\r\n                delete _this.get('_overlays')[overlayId];\r\n            });\r\n        }\r\n        return new Promise(function (resolve) {\r\n            _this._objectInstance.remove(function () { return resolve(); });\r\n        });\r\n    };\r\n    /**\r\n     * Remove all overlays, such as marker\r\n     * @return {Promise<any>}\r\n     */\r\n    GoogleMap.prototype.clear = function () {\r\n        var _this = this;\r\n        if (this.get('_overlays')) {\r\n            Object.keys(this.get('_overlays')).forEach(function (overlayId) {\r\n                _this.get('_overlays')[overlayId] = null;\r\n                delete _this.get('_overlays')[overlayId];\r\n            });\r\n        }\r\n        return new Promise(function (resolve) {\r\n            _this._objectInstance.clear(function () { return resolve(); });\r\n        });\r\n    };\r\n    /**\r\n     * Convert the unit from LatLng to the pixels from the left/top of the map div\r\n     * @return {Promise<any>}\r\n     */\r\n    GoogleMap.prototype.fromLatLngToPoint = function (latLng) { return; };\r\n    /**\r\n     * Convert the unit from the pixels from the left/top to the LatLng\r\n     * @return {Promise<LatLng>}\r\n     */\r\n    GoogleMap.prototype.fromPointToLatLng = function (point) { return; };\r\n    /**\r\n     * Set true if you want to show the MyLocation control (blue dot)\r\n     * @param enabled {boolean}\r\n     */\r\n    GoogleMap.prototype.setMyLocationEnabled = function (enabled) { };\r\n    /**\r\n     * Set true if you want to show the MyLocation button\r\n     * @param enabled {boolean}\r\n     */\r\n    GoogleMap.prototype.setMyLocationButtonEnabled = function (enabled) { };\r\n    /**\r\n     * Get the currently focused building\r\n     * @return {Promise<any>}\r\n     */\r\n    GoogleMap.prototype.getFocusedBuilding = function () { return; };\r\n    /**\r\n     * Set true if you want to show the indoor map\r\n     * @param enabled {boolean}\r\n     */\r\n    GoogleMap.prototype.setIndoorEnabled = function (enabled) { };\r\n    /**\r\n     * Set true if you want to show the traffic layer\r\n     * @param enabled {boolean}\r\n     */\r\n    GoogleMap.prototype.setTrafficEnabled = function (enabled) { };\r\n    /**\r\n     * Set true if you want to show the compass button\r\n     * @param enabled {boolean}\r\n     */\r\n    GoogleMap.prototype.setCompassEnabled = function (enabled) { };\r\n    /**\r\n     * Sets the preference for whether all gestures should be enabled or disabled\r\n     * @param enabled {boolean}\r\n     */\r\n    GoogleMap.prototype.setAllGesturesEnabled = function (enabled) { };\r\n    /**\r\n     * Set visibility of the map\r\n     * @param visible {boolean}\r\n     */\r\n    GoogleMap.prototype.setVisible = function (visible) { };\r\n    /**\r\n     * Adjust the map padding (same as CSS padding rule)\r\n     * @param top {number}\r\n     * @param right {number}\r\n     * @param left {number}\r\n     * @param bottom {number}\r\n     */\r\n    GoogleMap.prototype.setPadding = function (top, right, bottom, left) { };\r\n    /**\r\n     * Set options\r\n     * @param options\r\n     */\r\n    GoogleMap.prototype.setOptions = function (options) { };\r\n    /**\r\n     * Adds a marker\r\n     * @param options {MarkerOptions} options\r\n     * @return {Promise<Marker>}\r\n     */\r\n    GoogleMap.prototype.addMarker = function (options) {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            _this._objectInstance.addMarker(options, function (marker) {\r\n                if (marker) {\r\n                    var overlayId_1 = marker.getId();\r\n                    var overlay_1 = new Marker(_this, marker);\r\n                    _this.get('_overlays')[overlayId_1] = overlay_1;\r\n                    marker.one(overlayId_1 + '_remove', function () {\r\n                        if (_this.get('_overlays')) {\r\n                            _this.get('_overlays')[overlayId_1] = null;\r\n                            overlay_1.destroy();\r\n                        }\r\n                    });\r\n                    resolve(overlay_1);\r\n                }\r\n                else {\r\n                    reject();\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Adds a marker cluster\r\n     * @param options {MarkerClusterOptions} options\r\n     * @return {Promise<MarkerCluster>}\r\n     */\r\n    GoogleMap.prototype.addMarkerCluster = function (options) {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            _this._objectInstance.addMarkerCluster(options, function (markerCluster) {\r\n                if (markerCluster) {\r\n                    var overlayId_2 = markerCluster.getId();\r\n                    var overlay_2 = new MarkerCluster(_this, markerCluster);\r\n                    _this.get('_overlays')[overlayId_2] = overlay_2;\r\n                    markerCluster.one('remove', function () {\r\n                        if (_this.get('_overlays')) {\r\n                            _this.get('_overlays')[overlayId_2] = null;\r\n                            overlay_2.destroy();\r\n                        }\r\n                    });\r\n                    markerCluster.set('_overlays', new BaseArrayClass());\r\n                    resolve(overlay_2);\r\n                }\r\n                else {\r\n                    reject();\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Adds a circle\r\n     * @param options {CircleOptions} options\r\n     * @return {Promise<Circle>}\r\n     */\r\n    GoogleMap.prototype.addCircle = function (options) {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            _this._objectInstance.addCircle(options, function (circle) {\r\n                if (circle) {\r\n                    var overlayId_3 = circle.getId();\r\n                    var overlay_3 = new Circle(_this, circle);\r\n                    _this.get('_overlays')[overlayId_3] = overlay_3;\r\n                    circle.one(overlayId_3 + '_remove', function () {\r\n                        if (_this.get('_overlays')) {\r\n                            _this.get('_overlays')[overlayId_3] = null;\r\n                            overlay_3.destroy();\r\n                        }\r\n                    });\r\n                    resolve(overlay_3);\r\n                }\r\n                else {\r\n                    reject();\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Adds a polygon\r\n     * @param options {PolygonOptions} options\r\n     * @return {Promise<Polygon>}\r\n     */\r\n    GoogleMap.prototype.addPolygon = function (options) {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            _this._objectInstance.addPolygon(options, function (polygon) {\r\n                if (polygon) {\r\n                    var overlayId_4 = polygon.getId();\r\n                    var overlay_4 = new Polygon(_this, polygon);\r\n                    _this.get('_overlays')[overlayId_4] = overlay_4;\r\n                    polygon.one(overlayId_4 + '_remove', function () {\r\n                        if (_this.get('_overlays')) {\r\n                            _this.get('_overlays')[overlayId_4] = null;\r\n                            overlay_4.destroy();\r\n                        }\r\n                    });\r\n                    resolve(overlay_4);\r\n                }\r\n                else {\r\n                    reject();\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Adds a polyline\r\n     * @param options {PolylineOptions} options\r\n     * @return {Promise<Polyline>}\r\n     */\r\n    GoogleMap.prototype.addPolyline = function (options) {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            _this._objectInstance.addPolyline(options, function (polyline) {\r\n                if (polyline) {\r\n                    var overlayId_5 = polyline.getId();\r\n                    var overlay_5 = new Polyline(_this, polyline);\r\n                    _this.get('_overlays')[overlayId_5] = overlay_5;\r\n                    polyline.one(overlayId_5 + '_remove', function () {\r\n                        if (_this.get('_overlays')) {\r\n                            _this.get('_overlays')[overlayId_5] = null;\r\n                            overlay_5.destroy();\r\n                        }\r\n                    });\r\n                    resolve(overlay_5);\r\n                }\r\n                else {\r\n                    reject();\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Adds a tile overlay\r\n     * @param options {TileOverlayOptions} options\r\n     * @return {Promise<TileOverlay>}\r\n     */\r\n    GoogleMap.prototype.addTileOverlay = function (options) {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            _this._objectInstance.addTileOverlay(options, function (tileOverlay) {\r\n                if (tileOverlay) {\r\n                    var overlayId_6 = tileOverlay.getId();\r\n                    var overlay_6 = new TileOverlay(_this, tileOverlay);\r\n                    _this.get('_overlays')[overlayId_6] = overlay_6;\r\n                    tileOverlay.one(overlayId_6 + '_remove', function () {\r\n                        if (_this.get('_overlays')) {\r\n                            _this.get('_overlays')[overlayId_6] = null;\r\n                            overlay_6.destroy();\r\n                        }\r\n                    });\r\n                    resolve(overlay_6);\r\n                }\r\n                else {\r\n                    reject();\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Adds a ground overlay\r\n     * @param options {GroundOverlayOptions} options\r\n     * @return {Promise<GroundOverlay>}\r\n     */\r\n    GoogleMap.prototype.addGroundOverlay = function (options) {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            _this._objectInstance.addGroundOverlay(options, function (groundOverlay) {\r\n                if (groundOverlay) {\r\n                    var overlayId_7 = groundOverlay.getId();\r\n                    var overlay_7 = new GroundOverlay(_this, groundOverlay);\r\n                    _this.get('_overlays')[overlayId_7] = overlay_7;\r\n                    groundOverlay.one(overlayId_7 + '_remove', function () {\r\n                        if (_this.get('_overlays')) {\r\n                            _this.get('_overlays')[overlayId_7] = null;\r\n                            overlay_7.destroy();\r\n                        }\r\n                    });\r\n                    resolve(overlay_7);\r\n                }\r\n                else {\r\n                    reject();\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Adds a kml overlay\r\n     * @param options {KmlOverlayOptions} options\r\n     * @return {Promise<KmlOverlay>}\r\n     */\r\n    GoogleMap.prototype.addKmlOverlay = function (options) {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            _this._objectInstance.addKmlOverlay(options, function (kmlOverlay) {\r\n                if (kmlOverlay) {\r\n                    var overlayId_8 = kmlOverlay.getId();\r\n                    var overlay_8 = new KmlOverlay(_this, kmlOverlay);\r\n                    _this.get('_overlays')[overlayId_8] = overlay_8;\r\n                    kmlOverlay.one(overlayId_8 + '_remove', function () {\r\n                        if (_this.get('_overlays')) {\r\n                            _this.get('_overlays')[overlayId_8] = null;\r\n                            overlay_8.destroy();\r\n                        }\r\n                    });\r\n                    resolve(overlay_8);\r\n                }\r\n                else {\r\n                    reject();\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Returns the base64 encoded screen capture of the map.\r\n     * @param options {ToDataUrlOptions} [options] options\r\n     * @return {Promise<string>}\r\n     */\r\n    GoogleMap.prototype.toDataURL = function (options) { return; };\r\n    __decorate([\r\n        InstanceCheck(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Object]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], GoogleMap.prototype, \"setDiv\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", HTMLElement)\r\n    ], GoogleMap.prototype, \"getDiv\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [String]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], GoogleMap.prototype, \"setMapTypeId\", null);\r\n    __decorate([\r\n        CordovaInstance(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Object]),\r\n        __metadata(\"design:returntype\", Promise)\r\n    ], GoogleMap.prototype, \"animateCamera\", null);\r\n    __decorate([\r\n        CordovaInstance(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", Promise)\r\n    ], GoogleMap.prototype, \"animateCameraZoomIn\", null);\r\n    __decorate([\r\n        CordovaInstance(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", Promise)\r\n    ], GoogleMap.prototype, \"animateCameraZoomOut\", null);\r\n    __decorate([\r\n        CordovaInstance(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Object]),\r\n        __metadata(\"design:returntype\", Promise)\r\n    ], GoogleMap.prototype, \"moveCamera\", null);\r\n    __decorate([\r\n        CordovaInstance(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", Promise)\r\n    ], GoogleMap.prototype, \"moveCameraZoomIn\", null);\r\n    __decorate([\r\n        CordovaInstance(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", Promise)\r\n    ], GoogleMap.prototype, \"moveCameraZoomOut\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", Object)\r\n    ], GoogleMap.prototype, \"getCameraPosition\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", Object)\r\n    ], GoogleMap.prototype, \"getCameraTarget\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", Number)\r\n    ], GoogleMap.prototype, \"getCameraZoom\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", Number)\r\n    ], GoogleMap.prototype, \"getCameraBearing\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", Number)\r\n    ], GoogleMap.prototype, \"getCameraTilt\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Object]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], GoogleMap.prototype, \"setCameraTarget\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Number]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], GoogleMap.prototype, \"setCameraZoom\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Number]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], GoogleMap.prototype, \"setCameraTilt\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Object]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], GoogleMap.prototype, \"setCameraBearing\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Number, Number]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], GoogleMap.prototype, \"panBy\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", VisibleRegion)\r\n    ], GoogleMap.prototype, \"getVisibleRegion\", null);\r\n    __decorate([\r\n        CordovaInstance(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Object]),\r\n        __metadata(\"design:returntype\", Promise)\r\n    ], GoogleMap.prototype, \"getMyLocation\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Boolean]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], GoogleMap.prototype, \"setClickable\", null);\r\n    __decorate([\r\n        CordovaInstance(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", Promise)\r\n    ], GoogleMap.prototype, \"remove\", null);\r\n    __decorate([\r\n        InstanceCheck(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", Promise)\r\n    ], GoogleMap.prototype, \"clear\", null);\r\n    __decorate([\r\n        CordovaInstance(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Object]),\r\n        __metadata(\"design:returntype\", Promise)\r\n    ], GoogleMap.prototype, \"fromLatLngToPoint\", null);\r\n    __decorate([\r\n        CordovaInstance(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Array]),\r\n        __metadata(\"design:returntype\", Promise)\r\n    ], GoogleMap.prototype, \"fromPointToLatLng\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Boolean]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], GoogleMap.prototype, \"setMyLocationEnabled\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Boolean]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], GoogleMap.prototype, \"setMyLocationButtonEnabled\", null);\r\n    __decorate([\r\n        CordovaInstance(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", Promise)\r\n    ], GoogleMap.prototype, \"getFocusedBuilding\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Boolean]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], GoogleMap.prototype, \"setIndoorEnabled\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Boolean]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], GoogleMap.prototype, \"setTrafficEnabled\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Boolean]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], GoogleMap.prototype, \"setCompassEnabled\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Boolean]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], GoogleMap.prototype, \"setAllGesturesEnabled\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Boolean]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], GoogleMap.prototype, \"setVisible\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Number, Number, Number, Number]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], GoogleMap.prototype, \"setPadding\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Object]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], GoogleMap.prototype, \"setOptions\", null);\r\n    __decorate([\r\n        InstanceCheck(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Object]),\r\n        __metadata(\"design:returntype\", Promise)\r\n    ], GoogleMap.prototype, \"addMarker\", null);\r\n    __decorate([\r\n        InstanceCheck(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Object]),\r\n        __metadata(\"design:returntype\", Promise)\r\n    ], GoogleMap.prototype, \"addMarkerCluster\", null);\r\n    __decorate([\r\n        InstanceCheck(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Object]),\r\n        __metadata(\"design:returntype\", Promise)\r\n    ], GoogleMap.prototype, \"addCircle\", null);\r\n    __decorate([\r\n        InstanceCheck(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Object]),\r\n        __metadata(\"design:returntype\", Promise)\r\n    ], GoogleMap.prototype, \"addPolygon\", null);\r\n    __decorate([\r\n        InstanceCheck(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Object]),\r\n        __metadata(\"design:returntype\", Promise)\r\n    ], GoogleMap.prototype, \"addPolyline\", null);\r\n    __decorate([\r\n        InstanceCheck(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Object]),\r\n        __metadata(\"design:returntype\", Promise)\r\n    ], GoogleMap.prototype, \"addTileOverlay\", null);\r\n    __decorate([\r\n        InstanceCheck(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Object]),\r\n        __metadata(\"design:returntype\", Promise)\r\n    ], GoogleMap.prototype, \"addGroundOverlay\", null);\r\n    __decorate([\r\n        InstanceCheck(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Object]),\r\n        __metadata(\"design:returntype\", Promise)\r\n    ], GoogleMap.prototype, \"addKmlOverlay\", null);\r\n    __decorate([\r\n        CordovaInstance(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Object]),\r\n        __metadata(\"design:returntype\", Promise)\r\n    ], GoogleMap.prototype, \"toDataURL\", null);\r\n    GoogleMap = __decorate([\r\n        Plugin({\r\n            pluginName: 'GoogleMaps',\r\n            plugin: 'cordova-plugin-googlemaps'\r\n        }),\r\n        __metadata(\"design:paramtypes\", [Object, Object])\r\n    ], GoogleMap);\r\n    return GoogleMap;\r\n}(BaseClass));\r\nexport { GoogleMap };\r\n/**\r\n * @hidden\r\n */\r\nvar GroundOverlay = (function (_super) {\r\n    __extends(GroundOverlay, _super);\r\n    function GroundOverlay(_map, _objectInstance) {\r\n        var _this = _super.call(this) || this;\r\n        _this._map = _map;\r\n        _this._objectInstance = _objectInstance;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Returns the ID of instance.\r\n     * @return {string}\r\n     */\r\n    GroundOverlay.prototype.getId = function () { return; };\r\n    /**\r\n     * Returns the map instance.\r\n     * @return {GoogleMap}\r\n     */\r\n    GroundOverlay.prototype.getMap = function () { return this._map; };\r\n    /**\r\n     * Changes the bounds of the GroundOverlay\r\n     * @param bounds { ILatLng[]}\r\n     */\r\n    GroundOverlay.prototype.setBounds = function (bounds) { };\r\n    /**\r\n     * Changes the bearing of the ground overlay\r\n     * @param bearing {number}\r\n     */\r\n    GroundOverlay.prototype.setBearing = function (bearing) { };\r\n    /**\r\n     * Returns the current bearing value\r\n     */\r\n    GroundOverlay.prototype.getBearing = function () { return; };\r\n    /**\r\n     * Changes the image of the ground overlay\r\n     * @param imageUrl {string} URL of image\r\n     */\r\n    GroundOverlay.prototype.setImage = function (imageUrl) { };\r\n    ;\r\n    /**\r\n     * Changes the opacity of the ground overlay from 0.0 to 1.0\r\n     * @param opacity {number}\r\n     */\r\n    GroundOverlay.prototype.setOpacity = function (opacity) { };\r\n    /**\r\n     * Returns the current opacity\r\n     * @return {number}\r\n     */\r\n    GroundOverlay.prototype.getOpacity = function () { return; };\r\n    /**\r\n     * Changes click-ability of the ground overlay\r\n     * @param clickable {boolean}\r\n     */\r\n    GroundOverlay.prototype.setClickable = function (clickable) { };\r\n    /**\r\n     * Returns true if the ground overlay is clickable\r\n     * @return {boolean}\r\n     */\r\n    GroundOverlay.prototype.getClickable = function () { return; };\r\n    /**\r\n     * Changes visibility of the ground overlay\r\n     * @param visible {boolean}\r\n     */\r\n    GroundOverlay.prototype.setVisible = function (visible) { };\r\n    /**\r\n     * Returns true if the ground overlay is visible\r\n     * @return {boolean}\r\n     */\r\n    GroundOverlay.prototype.getVisible = function () { return; };\r\n    /**\r\n     * Changes the ground overlay zIndex order\r\n     * @param index {number}\r\n     */\r\n    GroundOverlay.prototype.setZIndex = function (index) { };\r\n    /**\r\n     * Returns the current ground overlay zIndex\r\n     * @return {number}\r\n     */\r\n    GroundOverlay.prototype.getZIndex = function () { return; };\r\n    /**\r\n     * Remove the ground overlay\r\n     */\r\n    GroundOverlay.prototype.remove = function () {\r\n        delete this._objectInstance.getMap().get('_overlays')[this.getId()];\r\n        this._objectInstance.remove();\r\n        this.destroy();\r\n    };\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", String)\r\n    ], GroundOverlay.prototype, \"getId\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Array]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], GroundOverlay.prototype, \"setBounds\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Number]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], GroundOverlay.prototype, \"setBearing\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", Number)\r\n    ], GroundOverlay.prototype, \"getBearing\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [String]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], GroundOverlay.prototype, \"setImage\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Number]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], GroundOverlay.prototype, \"setOpacity\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", Number)\r\n    ], GroundOverlay.prototype, \"getOpacity\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Boolean]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], GroundOverlay.prototype, \"setClickable\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", Boolean)\r\n    ], GroundOverlay.prototype, \"getClickable\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Boolean]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], GroundOverlay.prototype, \"setVisible\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", Boolean)\r\n    ], GroundOverlay.prototype, \"getVisible\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Number]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], GroundOverlay.prototype, \"setZIndex\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", Number)\r\n    ], GroundOverlay.prototype, \"getZIndex\", null);\r\n    __decorate([\r\n        CordovaCheck(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], GroundOverlay.prototype, \"remove\", null);\r\n    return GroundOverlay;\r\n}(BaseClass));\r\nexport { GroundOverlay };\r\n/**\r\n * @hidden\r\n */\r\nvar HtmlInfoWindow = (function (_super) {\r\n    __extends(HtmlInfoWindow, _super);\r\n    function HtmlInfoWindow() {\r\n        var _this = _super.call(this) || this;\r\n        _this._objectInstance = new (GoogleMaps.getPlugin().HtmlInfoWindow)();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Changes the backgroundColor\r\n     * @param color {string}\r\n     */\r\n    HtmlInfoWindow.prototype.setBackgroundColor = function (color) { };\r\n    /**\r\n     * Set your HTML contents.\r\n     * @param content {any} String containing text or HTML element\r\n     * @param cssOptions? {any} CSS styles for the container element of HTMLInfoWindow\r\n     */\r\n    HtmlInfoWindow.prototype.setContent = function (content, cssOptions) { };\r\n    /**\r\n     * Open the htmlInfoWindow\r\n     * @param marker {Marker}\r\n     */\r\n    HtmlInfoWindow.prototype.open = function (marker) { };\r\n    /**\r\n     * Close the htmlInfoWindow\r\n     */\r\n    HtmlInfoWindow.prototype.close = function () { };\r\n    __decorate([\r\n        CordovaInstance(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [String]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], HtmlInfoWindow.prototype, \"setBackgroundColor\", null);\r\n    __decorate([\r\n        CordovaInstance(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Object, Object]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], HtmlInfoWindow.prototype, \"setContent\", null);\r\n    __decorate([\r\n        CordovaInstance(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Object]),\r\n        __metadata(\"design:returntype\", Object)\r\n    ], HtmlInfoWindow.prototype, \"open\", null);\r\n    __decorate([\r\n        CordovaInstance(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], HtmlInfoWindow.prototype, \"close\", null);\r\n    HtmlInfoWindow = __decorate([\r\n        Plugin({\r\n            plugin: 'cordova-plugin-googlemaps',\r\n            pluginName: 'GoogleMaps',\r\n            pluginRef: 'plugin.google.maps.HtmlInfoWindow',\r\n            repo: ''\r\n        }),\r\n        __metadata(\"design:paramtypes\", [])\r\n    ], HtmlInfoWindow);\r\n    return HtmlInfoWindow;\r\n}(BaseClass));\r\nexport { HtmlInfoWindow };\r\n/**\r\n * @hidden\r\n */\r\nvar Marker = (function (_super) {\r\n    __extends(Marker, _super);\r\n    function Marker(_map, _objectInstance) {\r\n        var _this = _super.call(this) || this;\r\n        _this._map = _map;\r\n        _this._objectInstance = _objectInstance;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Returns the ID of instance.\r\n     * @return {string}\r\n     */\r\n    Marker.prototype.getId = function () { return; };\r\n    /**\r\n     * Returns the map instance.\r\n     * @return {GoogleMap}\r\n     */\r\n    Marker.prototype.getMap = function () { return this._map; };\r\n    /**\r\n     * Set the marker position.\r\n     * @param latLng {ILatLng}\r\n     */\r\n    Marker.prototype.setPosition = function (latLng) { return; };\r\n    /**\r\n     * Returns the marker position.\r\n     * @return {ILatLng}\r\n     */\r\n    Marker.prototype.getPosition = function () { return; };\r\n    /**\r\n     * Show the normal infoWindow of the marker.\r\n     */\r\n    Marker.prototype.showInfoWindow = function () { };\r\n    /**\r\n     * Hide the normal infoWindow of the marker.\r\n     */\r\n    Marker.prototype.hideInfoWindow = function () { };\r\n    /**\r\n     * Specify the animation either `DROP` or `BOUNCE`\r\n     * @param animation {string}\r\n     */\r\n    Marker.prototype.setAnimation = function (animation) { };\r\n    /**\r\n     * Set true if you **do not want** to move the map when you click on the marker.\r\n     * @param disableAutoPan {boolean}\r\n     */\r\n    Marker.prototype.setDisableAutoPan = function (disableAutoPan) { };\r\n    /**\r\n     * Set false if you want to hide the marker.\r\n     * @param visible\r\n     */\r\n    Marker.prototype.setVisible = function (visible) { };\r\n    /**\r\n     * Returns true if the marker is visible\r\n     */\r\n    Marker.prototype.isVisible = function () { return; };\r\n    /**\r\n     * Changes title of the normal infoWindow.\r\n     * @param title {string}\r\n     */\r\n    Marker.prototype.setTitle = function (title) { };\r\n    /**\r\n     * Returns the title strings.\r\n     * @return {string}\r\n     */\r\n    Marker.prototype.getTitle = function () { return; };\r\n    /**\r\n     * Changes snippet of the normal infoWindow.\r\n     * @param snippet {string}\r\n     */\r\n    Marker.prototype.setSnippet = function (snippet) { };\r\n    /**\r\n     * Returns the snippet strings.\r\n     * @return {string}\r\n     */\r\n    Marker.prototype.getSnippet = function () { return; };\r\n    /**\r\n     * Changes the marker opacity from 0.0 to 1.0.\r\n     * @param alpha {number} Opacity\r\n     */\r\n    Marker.prototype.setOpacity = function (alpha) { };\r\n    /**\r\n     * Returns the marker opacity.\r\n     * @return {number} Opacity\r\n     */\r\n    Marker.prototype.getOpacity = function () { return; };\r\n    /**\r\n     * Remove the marker.\r\n     */\r\n    Marker.prototype.remove = function () {\r\n        delete this._objectInstance.getMap().get('_overlays')[this.getId()];\r\n        this._objectInstance.remove();\r\n        this.destroy();\r\n    };\r\n    /**\r\n     * Changes the info window anchor. This defaults to 50% from the left of the image and at the bottom of the image.\r\n     * @param x {number} Distance from left of the icon image in pixels.\r\n     * @param y {number} Distance from top of the icon image in pixels.\r\n     */\r\n    Marker.prototype.setIconAnchor = function (x, y) { };\r\n    /**\r\n     * Changes the info window anchor. This defaults to 50% from the left of the image and at the top of the image.\r\n     * @param x {number} Distance from left of the icon image in pixels.\r\n     * @param y {number} Distance from top of the icon image in pixels.\r\n     */\r\n    Marker.prototype.setInfoWindowAnchor = function (x, y) { };\r\n    /**\r\n     * Returns true if the infoWindow is shown on the marker\r\n     * @return {boolean}\r\n     */\r\n    Marker.prototype.isInfoWindowShown = function () { return; };\r\n    /**\r\n     * Higher zIndex value overlays will be drawn on top of lower zIndex value tile layers and overlays.\r\n     * @param y {number} z-index\r\n     */\r\n    Marker.prototype.setZIndex = function (zIndex) { };\r\n    /**\r\n     * Get z-index\r\n     * @return {number}\r\n     */\r\n    Marker.prototype.getZIndex = function () { return; };\r\n    /**\r\n     * Set true if you allow all users to drag the marker.\r\n     * @param draggable {boolean}\r\n     */\r\n    Marker.prototype.setDraggable = function (draggable) { };\r\n    /**\r\n     * Returns true if the marker drag is enabled.\r\n     * @return {boolean}\r\n     */\r\n    Marker.prototype.isDraggable = function () { return; };\r\n    /**\r\n     * Set true if you want to be flat marker.\r\n     * @param flat {boolean}\r\n     */\r\n    Marker.prototype.setFlat = function (flat) { return; };\r\n    /**\r\n     * Changes icon url and/or size\r\n     * @param icon\r\n     */\r\n    Marker.prototype.setIcon = function (icon) { return; };\r\n    /**\r\n     * Set the marker rotation angle.\r\n     * @param rotation {number}\r\n     */\r\n    Marker.prototype.setRotation = function (rotation) { };\r\n    /**\r\n     * Returns the marker rotation angle.\r\n     * @return {number}\r\n     */\r\n    Marker.prototype.getRotation = function () { return; };\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", String)\r\n    ], Marker.prototype, \"getId\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Object]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], Marker.prototype, \"setPosition\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", Object)\r\n    ], Marker.prototype, \"getPosition\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], Marker.prototype, \"showInfoWindow\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], Marker.prototype, \"hideInfoWindow\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [String]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], Marker.prototype, \"setAnimation\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Boolean]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], Marker.prototype, \"setDisableAutoPan\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Boolean]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], Marker.prototype, \"setVisible\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", Boolean)\r\n    ], Marker.prototype, \"isVisible\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [String]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], Marker.prototype, \"setTitle\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", String)\r\n    ], Marker.prototype, \"getTitle\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [String]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], Marker.prototype, \"setSnippet\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", String)\r\n    ], Marker.prototype, \"getSnippet\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Number]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], Marker.prototype, \"setOpacity\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", Number)\r\n    ], Marker.prototype, \"getOpacity\", null);\r\n    __decorate([\r\n        CordovaCheck(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], Marker.prototype, \"remove\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Number, Number]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], Marker.prototype, \"setIconAnchor\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Number, Number]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], Marker.prototype, \"setInfoWindowAnchor\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", Boolean)\r\n    ], Marker.prototype, \"isInfoWindowShown\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Number]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], Marker.prototype, \"setZIndex\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", Number)\r\n    ], Marker.prototype, \"getZIndex\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Boolean]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], Marker.prototype, \"setDraggable\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", Boolean)\r\n    ], Marker.prototype, \"isDraggable\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Boolean]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], Marker.prototype, \"setFlat\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Object]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], Marker.prototype, \"setIcon\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Number]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], Marker.prototype, \"setRotation\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", Number)\r\n    ], Marker.prototype, \"getRotation\", null);\r\n    return Marker;\r\n}(BaseClass));\r\nexport { Marker };\r\n/**\r\n * @hidden\r\n */\r\nvar MarkerCluster = (function (_super) {\r\n    __extends(MarkerCluster, _super);\r\n    function MarkerCluster(_map, _objectInstance) {\r\n        var _this = _super.call(this) || this;\r\n        _this._map = _map;\r\n        _this._objectInstance = _objectInstance;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Returns the ID of instance.\r\n     * @return {string}\r\n     */\r\n    MarkerCluster.prototype.getId = function () { return; };\r\n    /**\r\n     * Add one marker location\r\n     * @param marker {MarkerOptions} one location\r\n     * @param skipRedraw? {boolean} marker cluster does not redraw the marker cluster if true.\r\n     */\r\n    MarkerCluster.prototype.addMarker = function (marker, skipRedraw) { };\r\n    /**\r\n     * Add marker locations\r\n     * @param markers {MarkerOptions[]} multiple location\r\n     */\r\n    MarkerCluster.prototype.addMarkers = function (markers) { };\r\n    /**\r\n     * Remove the marker cluster\r\n     */\r\n    MarkerCluster.prototype.remove = function () {\r\n        this._objectInstance.set('_overlays', undefined);\r\n        delete this._objectInstance.getMap().get('_overlays')[this.getId()];\r\n        this._objectInstance.remove();\r\n        this.destroy();\r\n    };\r\n    /**\r\n     * Returns the map instance.\r\n     * @return {GoogleMap}\r\n     */\r\n    MarkerCluster.prototype.getMap = function () { return this._map; };\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", String)\r\n    ], MarkerCluster.prototype, \"getId\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Object, Boolean]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], MarkerCluster.prototype, \"addMarker\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Array]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], MarkerCluster.prototype, \"addMarkers\", null);\r\n    __decorate([\r\n        InstanceCheck(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], MarkerCluster.prototype, \"remove\", null);\r\n    return MarkerCluster;\r\n}(BaseClass));\r\nexport { MarkerCluster };\r\n/**\r\n * @hidden\r\n */\r\nvar Polygon = (function (_super) {\r\n    __extends(Polygon, _super);\r\n    function Polygon(_map, _objectInstance) {\r\n        var _this = _super.call(this) || this;\r\n        _this._map = _map;\r\n        _this._objectInstance = _objectInstance;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Returns the ID of instance.\r\n     * @return {string}\r\n     */\r\n    Polygon.prototype.getId = function () { return; };\r\n    /**\r\n     * Returns the map instance.\r\n     * @return {GoogleMap}\r\n     */\r\n    Polygon.prototype.getMap = function () { return this._map; };\r\n    /**\r\n     * Changes the polygon points.\r\n     * @param points {ILatLng[]}\r\n     */\r\n    Polygon.prototype.setPoints = function (points) { };\r\n    /**\r\n     * Returns an instance of the BaseArrayClass.\r\n     * You can modify the points.\r\n     * @return {BaseArrayClass<ILatLng>}\r\n     */\r\n    Polygon.prototype.getPoints = function () {\r\n        return new BaseArrayClass(this._objectInstance.getPoints());\r\n    };\r\n    /**\r\n     * Changes the polygon holes.\r\n     * @param holes {ILatLng[][]}\r\n     */\r\n    Polygon.prototype.setHoles = function (holes) { };\r\n    /**\r\n     * Returns an instance of the BaseArrayClass.\r\n     * You can modify the holes.\r\n     * @return {BaseArrayClass<ILatLng[]>}\r\n     */\r\n    Polygon.prototype.getHoles = function () {\r\n        var holes = this._objectInstance.getPoints();\r\n        var results = new BaseArrayClass();\r\n        holes.forEach(function (hole) {\r\n            results.push(hole);\r\n        });\r\n        return results;\r\n    };\r\n    /**\r\n     * Changes the filling color (inner color)\r\n     * @param fillColor {string}\r\n     */\r\n    Polygon.prototype.setFillColor = function (fillColor) { };\r\n    /**\r\n     * Returns the current polygon filling color (inner color).\r\n     * @return {string}\r\n     */\r\n    Polygon.prototype.getFillColor = function () { return; };\r\n    /**\r\n     * Changes the stroke color (outer color)\r\n     * @param strokeColor {string}\r\n     */\r\n    Polygon.prototype.setStrokeColor = function (strokeColor) { };\r\n    /**\r\n     * Returns the current polygon stroke color (outer color)\r\n     * @return {string}\r\n     */\r\n    Polygon.prototype.getStrokeColor = function () { return; };\r\n    /**\r\n     * Changes click-ability of the polygon\r\n     * @param clickable {boolean}\r\n     */\r\n    Polygon.prototype.setClickable = function (clickable) { };\r\n    /**\r\n     * Returns true if the polygon is clickable\r\n     */\r\n    Polygon.prototype.getClickable = function () { return; };\r\n    /**\r\n     * Changes visibility of the polygon\r\n     * @param visible {boolean}\r\n     */\r\n    Polygon.prototype.setVisible = function (visible) { };\r\n    /**\r\n     * Returns true if the polygon is visible\r\n     * @return {boolean}\r\n     */\r\n    Polygon.prototype.getVisible = function () { return; };\r\n    /**\r\n     * Changes the polygon zIndex order.\r\n     * @param zIndex {number}\r\n     */\r\n    Polygon.prototype.setZIndex = function (zIndex) { };\r\n    /**\r\n     * Returns the current polygon zIndex\r\n     * @return {number}\r\n     */\r\n    Polygon.prototype.getZIndex = function () { return; };\r\n    /**\r\n     * Remove the polygon.\r\n     */\r\n    Polygon.prototype.remove = function () {\r\n        delete this._objectInstance.getMap().get('_overlays')[this.getId()];\r\n        this._objectInstance.remove();\r\n        this.destroy();\r\n    };\r\n    /**\r\n     * Changes the polygon stroke width\r\n     */\r\n    Polygon.prototype.setStrokeWidth = function (strokeWidth) { };\r\n    /**\r\n     * Returns the polygon stroke width\r\n     */\r\n    Polygon.prototype.getStrokeWidth = function () { return; };\r\n    /**\r\n     * When true, edges of the polygon are interpreted as geodesic and will follow the curvature of the Earth.\r\n     * @param geodesic {boolean}\r\n     */\r\n    Polygon.prototype.setGeodesic = function (geodesic) { };\r\n    /**\r\n     * Returns true if the polygon is geodesic.\r\n     * @return {boolean}\r\n     */\r\n    Polygon.prototype.getGeodesic = function () { return; };\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", String)\r\n    ], Polygon.prototype, \"getId\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Array]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], Polygon.prototype, \"setPoints\", null);\r\n    __decorate([\r\n        CordovaCheck(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", BaseArrayClass)\r\n    ], Polygon.prototype, \"getPoints\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Array]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], Polygon.prototype, \"setHoles\", null);\r\n    __decorate([\r\n        CordovaCheck(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", BaseArrayClass)\r\n    ], Polygon.prototype, \"getHoles\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [String]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], Polygon.prototype, \"setFillColor\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", String)\r\n    ], Polygon.prototype, \"getFillColor\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [String]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], Polygon.prototype, \"setStrokeColor\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", String)\r\n    ], Polygon.prototype, \"getStrokeColor\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Boolean]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], Polygon.prototype, \"setClickable\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", Boolean)\r\n    ], Polygon.prototype, \"getClickable\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Boolean]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], Polygon.prototype, \"setVisible\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", Boolean)\r\n    ], Polygon.prototype, \"getVisible\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Number]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], Polygon.prototype, \"setZIndex\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", Number)\r\n    ], Polygon.prototype, \"getZIndex\", null);\r\n    __decorate([\r\n        InstanceCheck(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], Polygon.prototype, \"remove\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Number]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], Polygon.prototype, \"setStrokeWidth\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", Number)\r\n    ], Polygon.prototype, \"getStrokeWidth\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Boolean]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], Polygon.prototype, \"setGeodesic\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", Boolean)\r\n    ], Polygon.prototype, \"getGeodesic\", null);\r\n    return Polygon;\r\n}(BaseClass));\r\nexport { Polygon };\r\n/**\r\n * @hidden\r\n */\r\nvar Polyline = (function (_super) {\r\n    __extends(Polyline, _super);\r\n    function Polyline(_map, _objectInstance) {\r\n        var _this = _super.call(this) || this;\r\n        _this._map = _map;\r\n        _this._objectInstance = _objectInstance;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Returns the ID of instance.\r\n     * @return {string}\r\n     */\r\n    Polyline.prototype.getId = function () { return; };\r\n    /**\r\n     * Returns the map instance.\r\n     * @return {GoogleMap}\r\n     */\r\n    Polyline.prototype.getMap = function () { return this._map; };\r\n    /**\r\n     * Changes the polyline points.\r\n     * @param points {ILatLng[]}\r\n     */\r\n    Polyline.prototype.setPoints = function (points) { };\r\n    /**\r\n     * Returns an instance of the BaseArrayClass\r\n     * You can modify the points.\r\n     * @return {BaseArrayClass<ILatLng>}\r\n     */\r\n    Polyline.prototype.getPoints = function () {\r\n        return new BaseArrayClass(this._objectInstance.getPoints());\r\n    };\r\n    /**\r\n     * When true, edges of the polyline are interpreted as geodesic and will follow the curvature of the Earth.\r\n     * @param geoDesic {boolean}\r\n     */\r\n    Polyline.prototype.setGeoDesic = function (geoDesic) { };\r\n    /**\r\n     * Returns true if the polyline is geodesic\r\n     */\r\n    Polyline.prototype.getGeodesic = function () { return; };\r\n    /**\r\n     * Changes visibility of the polyline\r\n     * @param visible {boolean}\r\n     */\r\n    Polyline.prototype.setVisible = function (visible) { };\r\n    /**\r\n     * Returns true if the polyline is visible\r\n     * @return {boolean}\r\n     */\r\n    Polyline.prototype.getVisible = function () { return; };\r\n    /**\r\n     * Changes click-ability of the polyline\r\n     * @param clickable {boolean}\r\n     */\r\n    Polyline.prototype.setClickable = function (clickable) { };\r\n    /**\r\n     * Returns true if the polyline is clickable\r\n     * @return {boolean}\r\n     */\r\n    Polyline.prototype.getClickable = function () { return; };\r\n    /**\r\n     * Changes the polyline color\r\n     * @param strokeColor {string}\r\n     */\r\n    Polyline.prototype.setStrokeColor = function (strokeColor) { };\r\n    /**\r\n     * Returns the current polyline color\r\n     * @return {string}\r\n     */\r\n    Polyline.prototype.getStrokeColor = function () { return; };\r\n    /**\r\n     * Changes the polyline stroke width\r\n     * @param strokeWidth {number}\r\n     */\r\n    Polyline.prototype.setStrokeWidth = function (strokeWidth) { };\r\n    /**\r\n     * Returns the current stroke width (unit: pixel).\r\n     * @return {number}\r\n     */\r\n    Polyline.prototype.getStrokeWidth = function () { return; };\r\n    /**\r\n     * Changes the polyline zIndex order.\r\n     * @param index {number}\r\n     */\r\n    Polyline.prototype.setZIndex = function (index) { };\r\n    /**\r\n     * Returns the current polyline zIndex\r\n     * @return {number}\r\n     */\r\n    Polyline.prototype.getZIndex = function () { return; };\r\n    /**\r\n     * Remove the polyline\r\n     */\r\n    Polyline.prototype.remove = function () {\r\n        delete this._objectInstance.getMap().get('_overlays')[this.getId()];\r\n        this._objectInstance.remove();\r\n        this.destroy();\r\n    };\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", String)\r\n    ], Polyline.prototype, \"getId\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Array]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], Polyline.prototype, \"setPoints\", null);\r\n    __decorate([\r\n        CordovaCheck(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", BaseArrayClass)\r\n    ], Polyline.prototype, \"getPoints\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Boolean]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], Polyline.prototype, \"setGeoDesic\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", Boolean)\r\n    ], Polyline.prototype, \"getGeodesic\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Boolean]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], Polyline.prototype, \"setVisible\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", Boolean)\r\n    ], Polyline.prototype, \"getVisible\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Boolean]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], Polyline.prototype, \"setClickable\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", Boolean)\r\n    ], Polyline.prototype, \"getClickable\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [String]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], Polyline.prototype, \"setStrokeColor\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", String)\r\n    ], Polyline.prototype, \"getStrokeColor\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Number]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], Polyline.prototype, \"setStrokeWidth\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", Number)\r\n    ], Polyline.prototype, \"getStrokeWidth\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Number]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], Polyline.prototype, \"setZIndex\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", Number)\r\n    ], Polyline.prototype, \"getZIndex\", null);\r\n    __decorate([\r\n        InstanceCheck(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], Polyline.prototype, \"remove\", null);\r\n    return Polyline;\r\n}(BaseClass));\r\nexport { Polyline };\r\n/**\r\n * @hidden\r\n */\r\nvar TileOverlay = (function (_super) {\r\n    __extends(TileOverlay, _super);\r\n    function TileOverlay(_map, _objectInstance) {\r\n        var _this = _super.call(this) || this;\r\n        _this._map = _map;\r\n        _this._objectInstance = _objectInstance;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Returns the ID of instance.\r\n     * @return {string}\r\n     */\r\n    TileOverlay.prototype.getId = function () { return; };\r\n    /**\r\n     * Returns the map instance.\r\n     * @return {GoogleMap}\r\n     */\r\n    TileOverlay.prototype.getMap = function () { return this._map; };\r\n    /**\r\n     * Set whether the tiles should fade in.\r\n     * @param fadeIn {boolean}\r\n     */\r\n    TileOverlay.prototype.setFadeIn = function (fadeIn) { };\r\n    /**\r\n     * Get whether the tiles should fade in\r\n     * @return {boolean}\r\n     */\r\n    TileOverlay.prototype.getFadeIn = function () { return; };\r\n    /**\r\n     * Set the zIndex of the tile overlay\r\n     * @param zIndex {number}\r\n     */\r\n    TileOverlay.prototype.setZIndex = function (zIndex) { };\r\n    /**\r\n     * Returns the zIndex of the tile overlay\r\n     * @return {number}\r\n     */\r\n    TileOverlay.prototype.getZIndex = function () { return; };\r\n    /**\r\n     * Set the opacity of the tile overlay\r\n     * @param opacity {number}\r\n     */\r\n    TileOverlay.prototype.setOpacity = function (opacity) { };\r\n    /**\r\n     * Returns the opacity of the tile overlay\r\n     * @return {number}\r\n     */\r\n    TileOverlay.prototype.getOpacity = function () { return; };\r\n    /**\r\n     * Set false if you want to hide\r\n     * @param visible {boolean}\r\n     */\r\n    TileOverlay.prototype.setVisible = function (visible) { };\r\n    /**\r\n     * Returns true if the tile overlay is visible\r\n     * @return {boolean}\r\n     */\r\n    TileOverlay.prototype.getVisible = function () { return; };\r\n    /**\r\n     * Get tile size\r\n     */\r\n    TileOverlay.prototype.getTileSize = function () { return; };\r\n    /**\r\n     * Remove the tile overlay\r\n     */\r\n    TileOverlay.prototype.remove = function () {\r\n        delete this._objectInstance.getMap().get('_overlays')[this.getId()];\r\n        this._objectInstance.remove();\r\n        this.destroy();\r\n    };\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", String)\r\n    ], TileOverlay.prototype, \"getId\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Boolean]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], TileOverlay.prototype, \"setFadeIn\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", Boolean)\r\n    ], TileOverlay.prototype, \"getFadeIn\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Number]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], TileOverlay.prototype, \"setZIndex\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", Number)\r\n    ], TileOverlay.prototype, \"getZIndex\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Number]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], TileOverlay.prototype, \"setOpacity\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", Number)\r\n    ], TileOverlay.prototype, \"getOpacity\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Boolean]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], TileOverlay.prototype, \"setVisible\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", Boolean)\r\n    ], TileOverlay.prototype, \"getVisible\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", Object)\r\n    ], TileOverlay.prototype, \"getTileSize\", null);\r\n    __decorate([\r\n        CordovaCheck(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], TileOverlay.prototype, \"remove\", null);\r\n    return TileOverlay;\r\n}(BaseClass));\r\nexport { TileOverlay };\r\n/**\r\n * @hidden\r\n */\r\nvar KmlOverlay = (function (_super) {\r\n    __extends(KmlOverlay, _super);\r\n    function KmlOverlay(_map, _objectInstance) {\r\n        var _this = _super.call(this) || this;\r\n        _this._map = _map;\r\n        _this._objectInstance = _objectInstance;\r\n        Object.defineProperty(self, 'camera', {\r\n            value: _this._objectInstance.camera,\r\n            writable: false\r\n        });\r\n        Object.defineProperty(self, 'kmlData', {\r\n            value: _this._objectInstance.kmlData,\r\n            writable: false\r\n        });\r\n        return _this;\r\n    }\r\n    /**\r\n     * Returns the viewport to contains all overlays\r\n     */\r\n    KmlOverlay.prototype.getDefaultViewport = function () { return; };\r\n    /**\r\n     * Returns the ID of instance.\r\n     * @return {string}\r\n     */\r\n    KmlOverlay.prototype.getId = function () { return; };\r\n    /**\r\n     * Returns the map instance.\r\n     * @return {GoogleMap}\r\n     */\r\n    KmlOverlay.prototype.getMap = function () { return this._map; };\r\n    /**\r\n     * Changes visibility of the kml overlay\r\n     * @param visible {boolean}\r\n     */\r\n    KmlOverlay.prototype.setVisible = function (visible) { };\r\n    /**\r\n     * Returns true if the kml overlay is visible\r\n     * @return {boolean}\r\n     */\r\n    KmlOverlay.prototype.getVisible = function () { return; };\r\n    /**\r\n     * Changes click-ability of the KmlOverlay\r\n     * @param clickable {boolean}\r\n     */\r\n    KmlOverlay.prototype.setClickable = function (clickable) { };\r\n    /**\r\n     * Returns true if the KmlOverlay is clickable\r\n     * @return {boolean}\r\n     */\r\n    KmlOverlay.prototype.getClickable = function () { return; };\r\n    /**\r\n     * Remove the KmlOverlay\r\n     */\r\n    KmlOverlay.prototype.remove = function () {\r\n        delete this._objectInstance.getMap().get('_overlays')[this.getId()];\r\n        this._objectInstance.remove();\r\n        this.destroy();\r\n    };\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", Object)\r\n    ], KmlOverlay.prototype, \"getDefaultViewport\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", String)\r\n    ], KmlOverlay.prototype, \"getId\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Boolean]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], KmlOverlay.prototype, \"setVisible\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", Boolean)\r\n    ], KmlOverlay.prototype, \"getVisible\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Boolean]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], KmlOverlay.prototype, \"setClickable\", null);\r\n    __decorate([\r\n        CordovaInstance({ sync: true }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", Boolean)\r\n    ], KmlOverlay.prototype, \"getClickable\", null);\r\n    __decorate([\r\n        InstanceCheck(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], KmlOverlay.prototype, \"remove\", null);\r\n    return KmlOverlay;\r\n}(BaseClass));\r\nexport { KmlOverlay };\r\n//# sourceMappingURL=index.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@ionic-native/google-maps/index.js\n// module id = 492\n// module chunks = 1"],"sourceRoot":""}